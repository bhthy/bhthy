{
    "swagger": "2.0",
    "info": {
        "title": "Getlancer V3",
        "description": "Quote, Bidding, Portfolio and Job Module",
        "contact": {
            "name": "Agriya Infoway",
            "url": "http://www.agriya.com",
            "email": "info@agriya.com"
        },
        "license": {
            "name": "Agriya Infoway Licence",
            "url": "http://www.agriya.com/"
        },
        "version": "v1.0b1"
    },
    "produces": [
        "application/json"
    ],
    "paths": {
        "/attachments": {
            "post": {
                "summary": "Upload attachment",
                "description": "Upload attachment",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "class",
                        "in": "query",
                        "description": "Class name (UserAvatar / QuoteService / QuoteServicePhoto / QuoteCategory / Portfolio/  ContestType / ContestUser / JobApply / Job / MessageContent / Project/ CoverPhoto/ Exam).",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "file",
                        "in": "formData",
                        "description": "Upload File.",
                        "required": false,
                        "type": "file"
                    }
                ],
                "tags": [
                    "Attachment"
                ],
                "responses": {
                    "200": {
                        "description": "File uploaded successfully"
                    },
                    "default": {
                        "description": "Unexpected error.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/cities": {
            "get": {
                "summary": "Fetch all cities",
                "description": "Returns all cities from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter city",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Keywords to limit ( all \\ numbers)",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "City"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched cities",
                        "schema": {
                            "$ref": "#/definitions/City"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new city",
                "description": "Creates a new city",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The city JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addCity"
                        }
                    }
                ],
                "tags": [
                    "City"
                ],
                "responses": {
                    "200": {
                        "description": "New city added",
                        "schema": {
                            "$ref": "#/definitions/City"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/cities/{cityId}": {
            "get": {
                "summary": "Fetch city",
                "description": "Returns a city based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "cityId",
                        "in": "path",
                        "description": "ID of city to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "City"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched city",
                        "schema": {
                            "$ref": "#/definitions/City"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update city by its id",
                "description": "Update city by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "cityId",
                        "in": "path",
                        "description": "ID of city to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The city JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addCity"
                        }
                    }
                ],
                "tags": [
                    "City"
                ],
                "responses": {
                    "200": {
                        "description": "City updated",
                        "schema": {
                            "$ref": "#/definitions/City"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete city",
                "description": "Deletes a single city based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "cityId",
                        "in": "path",
                        "description": "ID of city to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "City"
                ],
                "responses": {
                    "200": {
                        "description": "City deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/contacts": {
            "get": {
                "summary": "Fetch all contacts",
                "description": "Returns all contacts from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "tags": [
                    "Contact"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched contacts",
                        "schema": {
                            "$ref": "#/definitions/Contact"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new contact",
                "description": "Creates a new contact",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The contact JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addContact"
                        }
                    }
                ],
                "tags": [
                    "Contact"
                ],
                "responses": {
                    "200": {
                        "description": "New contact added",
                        "schema": {
                            "$ref": "#/definitions/Contact"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/contacts/{contactId}": {
            "get": {
                "summary": "Fetch contact",
                "description": "Returns a contact based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "contactId",
                        "in": "path",
                        "description": "ID of contact to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Contact"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched contact",
                        "schema": {
                            "$ref": "#/definitions/Contact"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete contact",
                "description": "Deletes a single contact based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "contactId",
                        "in": "path",
                        "description": "ID of contact to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Contact"
                ],
                "responses": {
                    "200": {
                        "description": "Contact deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/countries": {
            "get": {
                "summary": "Fetch all countries",
                "description": "Returns all countries from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Keywords to limit ( all \\ numbers)",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Country"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched countries",
                        "schema": {
                            "$ref": "#/definitions/Country"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new country",
                "description": "Creates a new country",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The country JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addCountry"
                        }
                    }
                ],
                "tags": [
                    "Country"
                ],
                "responses": {
                    "200": {
                        "description": "New country added",
                        "schema": {
                            "$ref": "#/definitions/Country"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/countries/{countryId}": {
            "get": {
                "summary": "Fetch country",
                "description": "Returns a country based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "countryId",
                        "in": "path",
                        "description": "ID of country to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Country"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched country",
                        "schema": {
                            "$ref": "#/definitions/Country"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update country by its id",
                "description": "Update country by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "countryId",
                        "in": "path",
                        "description": "ID of country to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The country JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addCountry"
                        }
                    }
                ],
                "tags": [
                    "Country"
                ],
                "responses": {
                    "200": {
                        "description": "Country updated",
                        "schema": {
                            "$ref": "#/definitions/Country"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete country",
                "description": "Deletes a single country based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "countryId",
                        "in": "path",
                        "description": "ID of country to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Country"
                ],
                "responses": {
                    "200": {
                        "description": "Country deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/email_templates": {
            "get": {
                "summary": "Fetch all email templates",
                "description": "Returns all email templates from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "tags": [
                    "EmailTemplate"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched email templates",
                        "schema": {
                            "$ref": "#/definitions/EmailTemplate"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/email_templates/{emailTemplateId}": {
            "get": {
                "summary": "Fetch email template",
                "description": "Returns a email template based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "emailTemplateId",
                        "in": "path",
                        "description": "ID of email template to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "EmailTemplate"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched email template",
                        "schema": {
                            "$ref": "#/definitions/EmailTemplate"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update email template by its id",
                "description": "Update email template by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "emailTemplateId",
                        "in": "path",
                        "description": "ID of email template to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The email template JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addEmailTemplate"
                        }
                    }
                ],
                "tags": [
                    "EmailTemplate"
                ],
                "responses": {
                    "200": {
                        "description": "Email Template updated",
                        "schema": {
                            "$ref": "#/definitions/EmailTemplate"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/languages": {
            "get": {
                "summary": "Fetch all languages",
                "description": "Returns all languages from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter language",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Keywords to limit ( all \\ numbers)",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Language"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched languages",
                        "schema": {
                            "$ref": "#/definitions/Language"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new language",
                "description": "Creates a new language",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The language JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addLanguage"
                        }
                    }
                ],
                "tags": [
                    "Language"
                ],
                "responses": {
                    "200": {
                        "description": "New language added",
                        "schema": {
                            "$ref": "#/definitions/Language"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/languages/{languageId}": {
            "get": {
                "summary": "Fetch language",
                "description": "Returns a language based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "languageId",
                        "in": "path",
                        "description": "ID of language to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Language"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched language",
                        "schema": {
                            "$ref": "#/definitions/Language"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update language by its id",
                "description": "Update language by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "languageId",
                        "in": "path",
                        "description": "ID of language to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The language JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addLanguage"
                        }
                    }
                ],
                "tags": [
                    "Language"
                ],
                "responses": {
                    "200": {
                        "description": "Language updated",
                        "schema": {
                            "$ref": "#/definitions/Language"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete language",
                "description": "Deletes a single language based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "languageId",
                        "in": "path",
                        "description": "ID of language to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Language"
                ],
                "responses": {
                    "200": {
                        "description": "Language deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/money_transfer_accounts": {
            "get": {
                "summary": "Fetch all money transfer accounts",
                "description": "Returns all money transfer accounts from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter money transfer account",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "user_id",
                        "in": "query",
                        "description": "user id to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "MoneyTransferAccount"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched money transfer accounts",
                        "schema": {
                            "$ref": "#/definitions/MoneyTransferAccount"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new money transfer account",
                "description": "Creates a new money transfer account",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The money transfer account JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addMoneyTransferAccount"
                        }
                    }
                ],
                "tags": [
                    "MoneyTransferAccount"
                ],
                "responses": {
                    "200": {
                        "description": "New money transfer account added",
                        "schema": {
                            "$ref": "#/definitions/MoneyTransferAccount"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/money_transfer_accounts/{moneyTransferAccountId}": {
            "get": {
                "summary": "Fetch money transfer account",
                "description": "Returns a money transfer account based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "moneyTransferAccountId",
                        "in": "path",
                        "description": "ID of money transfer account to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "MoneyTransferAccount"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched money transfer account",
                        "schema": {
                            "$ref": "#/definitions/MoneyTransferAccount"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update money transfer account by its id",
                "description": "Update money transfer account by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "moneyTransferAccountId",
                        "in": "path",
                        "description": "ID of money transfer account to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The money transfer account JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addMoneyTransferAccount"
                        }
                    }
                ],
                "tags": [
                    "MoneyTransferAccount"
                ],
                "responses": {
                    "200": {
                        "description": "Money Transfer Account updated",
                        "schema": {
                            "$ref": "#/definitions/MoneyTransferAccount"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete money transfer account",
                "description": "Deletes a single money transfer account based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "moneyTransferAccountId",
                        "in": "path",
                        "description": "ID of money transfer account to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "MoneyTransferAccount"
                ],
                "responses": {
                    "200": {
                        "description": "Money Transfer Account deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/pages": {
            "get": {
                "summary": "Fetch all pages",
                "description": "Returns all pages from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter page",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "tags": [
                    "Page"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched pages",
                        "schema": {
                            "$ref": "#/definitions/Page"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new page",
                "description": "Creates a new page",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The page JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addPage"
                        }
                    }
                ],
                "tags": [
                    "Page"
                ],
                "responses": {
                    "200": {
                        "description": "New page added",
                        "schema": {
                            "$ref": "#/definitions/Page"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/pages/{pageId}": {
            "get": {
                "summary": "Fetch page",
                "description": "Returns a page based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "pageId",
                        "in": "path",
                        "description": "ID/Slug of page to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Type value is \"slug\"",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Page"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched page",
                        "schema": {
                            "$ref": "#/definitions/Page"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update page by its id",
                "description": "Update page by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "pageId",
                        "in": "path",
                        "description": "ID of page to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The page JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addPage"
                        }
                    }
                ],
                "tags": [
                    "Page"
                ],
                "responses": {
                    "200": {
                        "description": "Page updated",
                        "schema": {
                            "$ref": "#/definitions/Page"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete page",
                "description": "Deletes a single page based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "pageId",
                        "in": "path",
                        "description": "ID of page to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Page"
                ],
                "responses": {
                    "200": {
                        "description": "Page deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/order": {
            "post": {
                "summary": "Creates a new payment",
                "description": "Creates a new payment",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The payment JSON you want to post . Class name (QuoteBid / Job / Project / Contest/ ExamsUser / Milestone / ProjectBidInvoice).",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addPayment"
                        }
                    }
                ],
                "tags": [
                    "Payment"
                ],
                "responses": {
                    "200": {
                        "description": "New payment added",
                        "schema": {
                            "$ref": "#/definitions/Payment"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/payment_gateways/list": {
            "get": {
                "summary": "Filter  payment gateways",
                "description": "Filter payment gateways",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "PaymentGateway"
                ],
                "responses": {
                    "200": {
                        "description": "Filter payment gateways."
                    },
                    "default": {
                        "description": "Unexpected error.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/payment_gateways": {
            "get": {
                "summary": "Fetch all payment gateways",
                "description": "Returns all payment gateways from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter payment gateway",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "tags": [
                    "PaymentGateway"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched payment gateways",
                        "schema": {
                            "$ref": "#/definitions/PaymentGateway"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/payment_gateways/{paymentGatewayId}": {
            "get": {
                "summary": "Fetch payment gateway",
                "description": "Returns a payment gateway based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "paymentGatewayId",
                        "in": "path",
                        "description": "ID of payment gateway to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "PaymentGateway"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched payment gateway",
                        "schema": {
                            "$ref": "#/definitions/PaymentGateway"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update payment gateway by its id",
                "description": "Update payment gateway by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "paymentGatewayId",
                        "in": "path",
                        "description": "ID of payment gateway to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The payment gateway JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addPaymentGateway"
                        }
                    }
                ],
                "tags": [
                    "PaymentGateway"
                ],
                "responses": {
                    "200": {
                        "description": "Payment Gateway updated",
                        "schema": {
                            "$ref": "#/definitions/PaymentGateway"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/post_gateways": {
            "post": {
                "summary": "Create new post gateway",
                "description": "Create new post gateway",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The post gateway JSON you want to post.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addPostGateway"
                        }
                    }
                ],
                "tags": [
                    "PaymentGateway"
                ],
                "responses": {
                    "200": {
                        "description": "New PostGateway added.",
                        "schema": {
                            "$ref": "#/definitions/addPostGateway"
                        }
                    },
                    "default": {
                        "description": "Unexpected error.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/get_gateways": {
            "get": {
                "summary": "Get gateways details",
                "description": "Get gateways details",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "PaymentGateway"
                ],
                "responses": {
                    "200": {
                        "description": "Get gateways details."
                    },
                    "default": {
                        "description": "Unexpected error.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/payment_gateway_settings/{paymentGatewayId}": {
            "put": {
                "summary": "Updated Payment Gateway Settings information",
                "description": "Updated Payment Gateway Settings information",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "paymentGatewayId",
                        "in": "path",
                        "description": "PaymentGatewayId",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Update payment gateway settings",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                ],
                "tags": [
                    "PaymentGateway"
                ],
                "responses": {
                    "200": {
                        "description": "Updated addons information",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/updatePaymentGateways"
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/payment_gateways/zazpay_synchronize": {
            "get": {
                "summary": "Synchronize ZazPay gateways",
                "description": "Synchronize ZazPay gateways",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "PaymentGateway"
                ],
                "responses": {
                    "200": {
                        "description": "ZazPay payment gateways synchronized"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/providers": {
            "get": {
                "summary": "Fetch all providers",
                "description": "Returns all providers from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter provider",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "tags": [
                    "Provider"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched providers",
                        "schema": {
                            "$ref": "#/definitions/Provider"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/providers/{providerId}": {
            "get": {
                "summary": "Fetch provider",
                "description": "Returns a provider based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "providerId",
                        "in": "path",
                        "description": "ID of provider to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Provider"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched provider",
                        "schema": {
                            "$ref": "#/definitions/Provider"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update provider by its id",
                "description": "Update provider by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "providerId",
                        "in": "path",
                        "description": "ID of provider to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The provider JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addProvider"
                        }
                    }
                ],
                "tags": [
                    "Provider"
                ],
                "responses": {
                    "200": {
                        "description": "Provider updated",
                        "schema": {
                            "$ref": "#/definitions/Provider"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/roles": {
            "get": {
                "summary": "Fetch all roles",
                "description": "Returns all roles from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter role",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Role"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched roles",
                        "schema": {
                            "$ref": "#/definitions/Role"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/roles/{roleId}": {
            "get": {
                "summary": "Fetch role",
                "description": "Returns a role based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "roleId",
                        "in": "path",
                        "description": "ID of role to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Role"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched role",
                        "schema": {
                            "$ref": "#/definitions/Role"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/setting_categories": {
            "get": {
                "summary": "Fetch all setting categories",
                "description": "Returns all setting categories from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "tags": [
                    "SettingCategory"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched setting categories",
                        "schema": {
                            "$ref": "#/definitions/SettingCategory"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/setting_categories/{settingCategoryId}": {
            "get": {
                "summary": "Fetch setting category",
                "description": "Returns a setting category based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "settingCategoryId",
                        "in": "path",
                        "description": "ID of setting category to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "SettingCategory"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched setting category",
                        "schema": {
                            "$ref": "#/definitions/SettingCategory"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/settings": {
            "get": {
                "summary": "Fetch all settings",
                "description": "Returns all settings from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "setting_category_id",
                        "in": "query",
                        "description": "ID of setting category to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "tags": [
                    "Setting"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched settings",
                        "schema": {
                            "$ref": "#/definitions/Setting"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/settings/{settingId}": {
            "get": {
                "summary": "Fetch setting",
                "description": "Returns a setting based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "settingId",
                        "in": "path",
                        "description": "ID of setting to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Setting"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched setting",
                        "schema": {
                            "$ref": "#/definitions/Setting"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update setting by its id",
                "description": "Update setting by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "settingId",
                        "in": "path",
                        "description": "ID of setting to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The setting JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addSetting"
                        }
                    }
                ],
                "tags": [
                    "Setting"
                ],
                "responses": {
                    "200": {
                        "description": "Setting updated",
                        "schema": {
                            "$ref": "#/definitions/Setting"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/states": {
            "get": {
                "summary": "Fetch all states",
                "description": "Returns all states from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter state",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Keywords to limit ( all \\ numbers)",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "country_id",
                        "in": "query",
                        "description": "Country Id",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "State"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched states",
                        "schema": {
                            "$ref": "#/definitions/State"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new state",
                "description": "Creates a new state",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The state JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addState"
                        }
                    }
                ],
                "tags": [
                    "State"
                ],
                "responses": {
                    "200": {
                        "description": "New state added",
                        "schema": {
                            "$ref": "#/definitions/State"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/states/{stateId}": {
            "get": {
                "summary": "Fetch state",
                "description": "Returns a state based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "stateId",
                        "in": "path",
                        "description": "ID of state to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "State"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched state",
                        "schema": {
                            "$ref": "#/definitions/State"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update state by its id",
                "description": "Update state by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "stateId",
                        "in": "path",
                        "description": "ID of state to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The state JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addState"
                        }
                    }
                ],
                "tags": [
                    "State"
                ],
                "responses": {
                    "200": {
                        "description": "State updated",
                        "schema": {
                            "$ref": "#/definitions/State"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete state",
                "description": "Deletes a single state based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "stateId",
                        "in": "path",
                        "description": "ID of state to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "State"
                ],
                "responses": {
                    "200": {
                        "description": "State deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/stats": {
            "get": {
                "summary": "Site stats",
                "description": "Site stats",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Stats"
                ],
                "responses": {
                    "200": {
                        "description": "Site stats"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/transactions": {
            "get": {
                "summary": "Fetch all transactions",
                "description": "Returns all transactions from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "type(today,this_week,this_month,custom)",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "from_date",
                        "in": "query",
                        "description": "from date for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "to_date",
                        "in": "query",
                        "description": "to_date for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "model_id",
                        "in": "query",
                        "description": "model id for records",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "model_class",
                        "in": "query",
                        "description": "model class for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Transactions"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched transactions",
                        "schema": {
                            "$ref": "#/definitions/Transaction"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/user_cash_withdrawals": {
            "get": {
                "summary": "Fetch all user cash withdrawals",
                "description": "Returns all user cash withdrawals from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "tags": [
                    "UserCashWithdrawal"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched user cash withdrawals",
                        "schema": {
                            "$ref": "#/definitions/UserCashWithdrawal"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/users/{userId}/user_cash_withdrawals": {
            "get": {
                "summary": "Fetch all user cash withdrawals",
                "description": "Returns all user cash withdrawals from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "ID of user",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "tags": [
                    "UserCashWithdrawal"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched user cash withdrawals",
                        "schema": {
                            "$ref": "#/definitions/UserCashWithdrawal"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new user cash withdrawal",
                "description": "Creates a new user cash withdrawal",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "ID of user",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The user cash withdrawal JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addUserCashWithdrawal"
                        }
                    }
                ],
                "tags": [
                    "UserCashWithdrawal"
                ],
                "responses": {
                    "200": {
                        "description": "New user cash withdrawal added",
                        "schema": {
                            "$ref": "#/definitions/UserCashWithdrawal"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/user_cash_withdrawals/{userCashWithdrawalId}": {
            "get": {
                "summary": "Fetch user cash withdrawal",
                "description": "Returns a user cash withdrawal based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "userCashWithdrawalId",
                        "in": "path",
                        "description": "ID of user cash withdrawal to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "UserCashWithdrawal"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched user cash withdrawal",
                        "schema": {
                            "$ref": "#/definitions/UserCashWithdrawal"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Fetch user cash withdrawal",
                "description": "Returns a user cash withdrawal based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "userCashWithdrawalId",
                        "in": "path",
                        "description": "ID of user cash withdrawal to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The user cash withdrawal JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addUserCashWithdrawal"
                        }
                    }
                ],
                "tags": [
                    "UserCashWithdrawal"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched user cash withdrawal",
                        "schema": {
                            "$ref": "#/definitions/UserCashWithdrawal"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/users/{userId}/user_cash_withdrawals/{userCashWithdrawalId}": {
            "get": {
                "summary": "Fetch user cash withdrawal",
                "description": "Returns a user cash withdrawal based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "ID of user",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "userCashWithdrawalId",
                        "in": "path",
                        "description": "ID of user cash withdrawal to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "UserCashWithdrawal"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched user cash withdrawal",
                        "schema": {
                            "$ref": "#/definitions/UserCashWithdrawal"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/user_cash_withdrawals/{withdrawalId}": {
        "delete": {
                "summary": "Delete user cash withdrawal",
                "description": "DELETE User Cash Withdrawals based on the ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "withdrawalId",
                        "in": "path",
                        "description": "ID of Cash Withdrawals to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "UserCashWithdrawal"
                ],
                "responses": {
                    "200": {
                        "description": "Cash Withdrawals is deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/oauth/token": {
            "get": {
                "summary": "Generate guest token",
                "tags": [
                    "Users"
                ],
                "responses": {
                    "200": {
                        "description": "Guest token generated"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/oauth/refresh_token": {
            "get": {
                "summary": "Generate refresh token",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Users"
                ],
                "responses": {
                    "200": {
                        "description": "Refresh token generated"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/users/register": {
            "post": {
                "summary": "User register",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The user JSON you want to post( {is_freelancer=1, is_employer=1} - role_id = 2 Else {is_freelancer=1} - role_id = 4 Else {is_employer=1} - role_id = 3) (address is optional)",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addUser"
                        }
                    }
                ],
                "tags": [
                    "Users"
                ],
                "responses": {
                    "200": {
                        "description": "User registered successfully",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/users/activation/{userId}/{hash}": {
            "put": {
                "summary": "Send activation mail",
                "description": "Send activation hash code to user for activation",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "ID of user to send activation mail",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "hash",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "Users"
                ],
                "responses": {
                    "200": {
                        "description": "Sent activation mail successfully",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "summary": "User login",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The login JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/loginUser"
                        }
                    }
                ],
                "tags": [
                    "Users"
                ],
                "responses": {
                    "200": {
                        "description": "User loggedin successfully",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/users/social_login": {
            "post": {
                "summary": "User social login",
                "description": "User social login",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The login JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addSociallogin"
                        }
                    }
                ],
                "tags": [
                    "Users"
                ],
                "responses": {
                    "200": {
                        "description": "Loggedin successfully"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "get": {
                "summary": "User social login for Twitter",
                "description": "User social login for Twitter",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Provider slug",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Users"
                ],
                "responses": {
                    "200": {
                        "description": "Loggedin successfully"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/users/forgot_password": {
            "post": {
                "summary": "Forgot password",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The forgot password JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/forgotPasswordUser"
                        }
                    }
                ],
                "tags": [
                    "Users"
                ],
                "responses": {
                    "200": {
                        "description": "Forgot password request sent successfully"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/users/{userId}/change_password": {
            "put": {
                "summary": "Change password",
                "description": "Change password",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "ID of user to change password",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The change password JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/changePasswordUser"
                        }
                    }
                ],
                "tags": [
                    "Users"
                ],
                "responses": {
                    "200": {
                        "description": "Password changed sucessfully",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/users/change_password": {
            "post": {
                "summary": "Change password",
                "description": "Change password",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The change password JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AdminchangePasswordToUser"
                        }
                    }
                ],
                "tags": [
                    "Users"
                ],
                "responses": {
                    "200": {
                        "description": "Password changed sucessfully",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/users/logout": {
            "get": {
                "summary": "Logout user",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Users"
                ],
                "responses": {
                    "200": {
                        "description": "User logged out successfully"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "summary": "Fetch all users",
                "description": "Returns all users from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter user",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Type value is \"portfolios\"",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "role",
                        "in": "query",
                        "description": "(freelancer / employer / admin / all)",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "is_email_confirmed",
                        "in": "query",
                        "description": "value must be true/false",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "is_have_service",
                        "in": "query",
                        "description": "value must be true/false",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "skills",
                        "in": "query",
                        "description": "skills filter",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "hourly_rate_min",
                        "in": "query",
                        "description": "hourly_rate_min",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "hourly_rate_max",
                        "in": "query",
                        "description": "hourly_rate_max",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Users"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched users",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "default": {
                        "description": "Unexpected error.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new user",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The user JSON you want to post (address is optional)",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addAdminUser"
                        }
                    }
                ],
                "tags": [
                    "Users"
                ],
                "responses": {
                    "200": {
                        "description": "User registered successfully",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/users/{userId}": {
            "get": {
                "summary": "Fetch user",
                "description": "Returns a user based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "ID of user to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Type value is \"view\"",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Users"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched user",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update user by its id",
                "description": "Update user by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "ID of user to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The user JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/updateUser"
                        }
                    }
                ],
                "tags": [
                    "Users"
                ],
                "responses": {
                    "200": {
                        "description": "User updated",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "default": {
                        "description": "Unexpected error.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete user",
                "description": "Deletes a single user based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "ID of user to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Users"
                ],
                "responses": {
                    "200": {
                        "description": "User deleted"
                    },
                    "default": {
                        "description": "Unexpected error.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/me": {
            "get": {
                "summary": "Fetch all users",
                "description": "Returns all users from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Users"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched users",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "default": {
                        "description": "Unexpected error.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/users/{userId}/money_transfer_accounts": {
            "get": {
                "summary": "Fetch all money transfer accounts",
                "description": "Returns all money transfer accounts from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "ID of user",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter money transfer account",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "tags": [
                    "MoneyTransferAccount"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched money transfer accounts",
                        "schema": {
                            "$ref": "#/definitions/MoneyTransferAccount"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new money transfer account",
                "description": "Creates a new money transfer account",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "ID of user",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The money transfer account JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addMoneyTransferAccount"
                        }
                    }
                ],
                "tags": [
                    "MoneyTransferAccount"
                ],
                "responses": {
                    "200": {
                        "description": "New money transfer account added",
                        "schema": {
                            "$ref": "#/definitions/MoneyTransferAccount"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/users/{userId}/money_transfer_accounts/{moneyTransferAccountId}": {
            "get": {
                "summary": "Fetch money transfer account",
                "description": "Returns a money transfer account based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "ID of user",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "moneyTransferAccountId",
                        "in": "path",
                        "description": "ID of money transfer account to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "MoneyTransferAccount"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched money transfer account",
                        "schema": {
                            "$ref": "#/definitions/MoneyTransferAccount"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update money transfer account by its id",
                "description": "Update money transfer account by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "ID of user",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "moneyTransferAccountId",
                        "in": "path",
                        "description": "ID of money transfer account to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The money transfer account JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addMoneyTransferAccount"
                        }
                    }
                ],
                "tags": [
                    "MoneyTransferAccount"
                ],
                "responses": {
                    "200": {
                        "description": "Money Transfer Account updated",
                        "schema": {
                            "$ref": "#/definitions/MoneyTransferAccount"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete money transfer account",
                "description": "Deletes a single money transfer account based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "ID of user",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "moneyTransferAccountId",
                        "in": "path",
                        "description": "ID of money transfer account to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "MoneyTransferAccount"
                ],
                "responses": {
                    "200": {
                        "description": "Money Transfer Account deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/wallets": {
            "get": {
                "summary": "Fetch all wallets",
                "description": "Returns all wallets from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Wallet"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched wallets",
                        "schema": {
                            "$ref": "#/definitions/Wallet"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new wallet",
                "description": "Creates a new wallet",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The add wallet JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addWallet"
                        }
                    }
                ],
                "tags": [
                    "Wallet"
                ],
                "responses": {
                    "200": {
                        "description": "New wallet amount added",
                        "schema": {
                            "$ref": "#/definitions/addWallet"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/activities": {
            "get": {
                "summary": "Fetch all activities",
                "description": "Returns all activities from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "class",
                        "in": "query",
                        "description": "Class name ( User / Portfolio /  Contest / ContestUser / Project / QuoteService / QuoteBid / Job / Exam ).",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "foreign_id",
                        "in": "query",
                        "description": "Id of foreign to fetch.",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "model_id",
                        "in": "query",
                        "description": "Id of model to fetch.",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "user_id",
                        "in": "query",
                        "description": "Id of user to fetch.",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "other_user_id",
                        "in": "query",
                        "description": "Id of other_user to fetch.",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "activity_type",
                        "in": "query",
                        "description": "activity_type",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "activity_type_not_in",
                        "in": "query",
                        "description": "activity_type_not_in",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "model_class",
                        "in": "query",
                        "description": "Class of model to fetch.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "tags": [
                    "Activity"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched activities",
                        "schema": {
                            "$ref": "#/definitions/Activity"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/me/activities": {
            "get": {
                "summary": "Fetch all activities",
                "description": "Returns all activities from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "class",
                        "in": "query",
                        "description": "Class name ( User / Portfolio /  Contest / ContestUser / Project / QuoteService / QuoteBid / Job / Exam ).",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "foreign_id",
                        "in": "query",
                        "description": "Id of foreign to fetch.",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "model_id",
                        "in": "query",
                        "description": "Id of model to fetch.",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "user_id",
                        "in": "query",
                        "description": "Id of user to fetch.",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "other_user_id",
                        "in": "query",
                        "description": "Id of other_user to fetch.",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "activity_type",
                        "in": "query",
                        "description": "activity_type",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "activity_type_not_in",
                        "in": "query",
                        "description": "activity_type_not_in",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "model_class",
                        "in": "query",
                        "description": "Class of model to fetch.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "tags": [
                    "Activity"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched activities",
                        "schema": {
                            "$ref": "#/definitions/Activity"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/contests": {
            "get": {
                "summary": "Fetch all contests",
                "description": "Returns all contests from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "contest_status_id",
                        "in": "query",
                        "description": "ID of contest status",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "contest_type_id",
                        "in": "query",
                        "description": "ID of contest type to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "resource_id",
                        "in": "query",
                        "description": "ID of resource to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "is_blind",
                        "in": "query",
                        "description": "To fetch is_blind records",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "is_private",
                        "in": "query",
                        "description": "To fetch is_private records",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "is_featured",
                        "in": "query",
                        "description": "To fetch is_featured records",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "is_highlight",
                        "in": "query",
                        "description": "To fetch is_highlight records",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "user_id",
                        "in": "query",
                        "description": "ID of user to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Contest"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched contests",
                        "schema": {
                            "$ref": "#/definitions/Contest"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new contest",
                "description": "Creates a new contest",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The contest JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addContest"
                        }
                    }
                ],
                "tags": [
                    "Contest"
                ],
                "responses": {
                    "200": {
                        "description": "New contest added",
                        "schema": {
                            "$ref": "#/definitions/Contest"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/contests/{contestId}": {
            "get": {
                "summary": "Fetch contest",
                "description": "Returns a contest based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "contestId",
                        "in": "path",
                        "description": "ID of contest to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Type value is \"view\"",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Contest"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched contest",
                        "schema": {
                            "$ref": "#/definitions/Contest"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update contest by its id",
                "description": "Update contest by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "contestId",
                        "in": "path",
                        "description": "ID of contest to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The contest JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/updateContest"
                        }
                    }
                ],
                "tags": [
                    "Contest"
                ],
                "responses": {
                    "200": {
                        "description": "Contest updated",
                        "schema": {
                            "$ref": "#/definitions/Contest"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete contest",
                "description": "Deletes a single contest based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "contestId",
                        "in": "path",
                        "description": "ID of contest to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Contest"
                ],
                "responses": {
                    "200": {
                        "description": "Contest deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/me/contests": {
            "get": {
                "summary": "Fetch all contests",
                "description": "Returns all contests from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "contest_status_id",
                        "in": "query",
                        "description": "ID of contest status",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Contest"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched contests",
                        "schema": {
                            "$ref": "#/definitions/Contest"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/contest_statuses": {
            "get": {
                "summary": "Fetch all contest statuses",
                "description": "Returns all contest statuses from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "ContestStatus"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched contest statuses",
                        "schema": {
                            "$ref": "#/definitions/ContestStatus"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/contest_statuses/{contestStatusId}": {
            "put": {
                "summary": "Update contest status by its id",
                "description": "Update contest status by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "contestStatusId",
                        "in": "path",
                        "description": "ID of contest status to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The contest status JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addContestStatus"
                        }
                    }
                ],
                "tags": [
                    "ContestStatus"
                ],
                "responses": {
                    "200": {
                        "description": "Contest Status updated",
                        "schema": {
                            "$ref": "#/definitions/ContestStatus"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/contest_types": {
            "get": {
                "summary": "Fetch all contest types",
                "description": "Returns all contest types from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter contest type",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "ContestType"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched contest types",
                        "schema": {
                            "$ref": "#/definitions/ContestType"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new contest type",
                "description": "Creates a new contest type",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The contest type JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addContestType"
                        }
                    }
                ],
                "tags": [
                    "ContestType"
                ],
                "responses": {
                    "200": {
                        "description": "New contest type added",
                        "schema": {
                            "$ref": "#/definitions/ContestType"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/contest_types/{contestTypeId}": {
            "get": {
                "summary": "Fetch contest type",
                "description": "Returns a contest type based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "contestTypeId",
                        "in": "path",
                        "description": "ID of contest type to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "ContestType"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched contest type",
                        "schema": {
                            "$ref": "#/definitions/ContestType"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update contest type by its id",
                "description": "Update contest type by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "contestTypeId",
                        "in": "path",
                        "description": "ID of contest type to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The contest type JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addContestType"
                        }
                    }
                ],
                "tags": [
                    "ContestType"
                ],
                "responses": {
                    "200": {
                        "description": "Contest Type updated",
                        "schema": {
                            "$ref": "#/definitions/ContestType"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete contest type",
                "description": "Deletes a single contest type based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "contestTypeId",
                        "in": "path",
                        "description": "ID of contest type to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "ContestType"
                ],
                "responses": {
                    "200": {
                        "description": "Contest Type deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/contest_types_pricing_days": {
            "post": {
                "summary": "Creates a new contest types pricing day",
                "description": "Creates a new contest types pricing day",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The contest types pricing day JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addContestTypesPricingDay"
                        }
                    }
                ],
                "tags": [
                    "ContestTypesPricingDay"
                ],
                "responses": {
                    "200": {
                        "description": "New contest types pricing day added",
                        "schema": {
                            "$ref": "#/definitions/ContestTypesPricingDay"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/contest_types_pricing_days/{contestTypesPricingDayId}": {
            "put": {
                "summary": "Update contest types pricing day by its id",
                "description": "Update contest types pricing day by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "contestTypesPricingDayId",
                        "in": "path",
                        "description": "ID of contest types pricing day to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The contest types pricing day JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addContestTypesPricingDay"
                        }
                    }
                ],
                "tags": [
                    "ContestTypesPricingDay"
                ],
                "responses": {
                    "200": {
                        "description": "Contest Types Pricing Day updated",
                        "schema": {
                            "$ref": "#/definitions/ContestTypesPricingDay"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/contest_types_pricing_packages": {
            "post": {
                "summary": "Creates a new contest types pricing package",
                "description": "Creates a new contest types pricing package",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The contest types pricing package JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addContestTypesPricingPackage"
                        }
                    }
                ],
                "tags": [
                    "ContestTypesPricingPackage"
                ],
                "responses": {
                    "200": {
                        "description": "New contest types pricing package added",
                        "schema": {
                            "$ref": "#/definitions/ContestTypesPricingPackage"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/contest_types_pricing_packages/{contestTypesPricingPackageId}": {
            "put": {
                "summary": "Update contest types pricing package by its id",
                "description": "Update contest types pricing package by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "contestTypesPricingPackageId",
                        "in": "path",
                        "description": "ID of contest types pricing package to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The contest types pricing package JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addContestTypesPricingPackage"
                        }
                    }
                ],
                "tags": [
                    "ContestTypesPricingPackage"
                ],
                "responses": {
                    "200": {
                        "description": "Contest Types Pricing Package updated",
                        "schema": {
                            "$ref": "#/definitions/ContestTypesPricingPackage"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/contest_users": {
            "get": {
                "summary": "Fetch all contest users",
                "description": "Returns all contest users from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter contest user",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Keywords to limit ( all \\ numbers)",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "contest_user_status_id",
                        "in": "query",
                        "description": "ID of contest  user status",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "type filter to list participants (entry)",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "contest_id",
                        "in": "query",
                        "description": "ID of contest  to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "user_id",
                        "in": "query",
                        "description": "ID of user",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "is_rated",
                        "in": "query",
                        "description": "To fetch Rated user",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "ContestUser"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched contest users",
                        "schema": {
                            "$ref": "#/definitions/ContestUser"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new contest user",
                "description": "Creates a new contest user",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The contest user JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addContestUser"
                        }
                    }
                ],
                "tags": [
                    "ContestUser"
                ],
                "responses": {
                    "200": {
                        "description": "New contest user added",
                        "schema": {
                            "$ref": "#/definitions/ContestUser"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/contest_users/{contestUserId}": {
            "get": {
                "summary": "Fetch contest user",
                "description": "Returns a contest user based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "contestUserId",
                        "in": "path",
                        "description": "ID of contest user to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "(type=delivery/expecting_deliverable)",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "ContestUser"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched contest user",
                        "schema": {
                            "$ref": "#/definitions/ContestUser"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update contest user by its id",
                "description": "Update contest user by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "contestUserId",
                        "in": "path",
                        "description": "ID of contest user to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The contest user JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/editContestUser"
                        }
                    }
                ],
                "tags": [
                    "ContestUser"
                ],
                "responses": {
                    "200": {
                        "description": "Contest User updated",
                        "schema": {
                            "$ref": "#/definitions/ContestUser"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete contest user",
                "description": "Deletes a single contest user based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "contestUserId",
                        "in": "path",
                        "description": "ID of contest user to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "ContestUser"
                ],
                "responses": {
                    "200": {
                        "description": "Contest User deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/me/contest_users": {
            "get": {
                "summary": "Fetch all contest users",
                "description": "Returns all contest users from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter contest user",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "contest_user_status_id",
                        "in": "query",
                        "description": "ID of contest user to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "ContestUser"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched contest users",
                        "schema": {
                            "$ref": "#/definitions/ContestUser"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/contest/contest_users": {
            "get": {
                "summary": "Fetch all contest users",
                "description": "Returns all contest users from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "contest_id",
                        "in": "query",
                        "description": "ID of contest user to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Keywords to limit",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "ContestUser"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched contest users",
                        "schema": {
                            "$ref": "#/definitions/ContestUser"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/contest_user_statuses": {
            "get": {
                "summary": "Fetch all Contest user statuses",
                "description": "Returns all Contest user statuses from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter contest user status",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "ContestUserStatus"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched contest user statuses",
                        "schema": {
                            "$ref": "#/definitions/ContestUserStatus"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/contest_user_downloads": {
            "get": {
                "summary": "Fetch all contest user downloads",
                "description": "Returns all contest user downloads from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "ContestUserDownload"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched contest user downloads",
                        "schema": {
                            "$ref": "#/definitions/ContestUserDownload"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/contest_user_downloads/{contestUserDownloadId}": {
            "get": {
                "summary": "Fetch contest user download",
                "description": "Returns a contest user download based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "contestUserDownloadId",
                        "in": "path",
                        "description": "ID of contest user download to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "ContestUserDownload"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched contest user download",
                        "schema": {
                            "$ref": "#/definitions/ContestUserDownload"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete contest user download",
                "description": "Deletes a single contest user download based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "contestUserDownloadId",
                        "in": "path",
                        "description": "ID of contest user download to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "ContestUserDownload"
                ],
                "responses": {
                    "200": {
                        "description": "Contest User Download deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/pricing_days": {
            "get": {
                "summary": "Fetch all pricing days",
                "description": "Returns all pricing days from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "contest_type_id",
                        "in": "query",
                        "description": "ID of contest type to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter pricing day",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "PricingDay"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched pricing days",
                        "schema": {
                            "$ref": "#/definitions/PricingDay"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new pricing day",
                "description": "Creates a new pricing day",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The pricing day JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addPricingDay"
                        }
                    }
                ],
                "tags": [
                    "PricingDay"
                ],
                "responses": {
                    "200": {
                        "description": "New pricing day added",
                        "schema": {
                            "$ref": "#/definitions/PricingDay"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/pricing_days/{pricingDayId}": {
            "get": {
                "summary": "Fetch pricing day",
                "description": "Returns a pricing day based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "pricingDayId",
                        "in": "path",
                        "description": "ID of pricing day to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "PricingDay"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched pricing day",
                        "schema": {
                            "$ref": "#/definitions/PricingDay"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update pricing day by its id",
                "description": "Update pricing day by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "pricingDayId",
                        "in": "path",
                        "description": "ID of pricing day to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The pricing day JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addPricingDay"
                        }
                    }
                ],
                "tags": [
                    "PricingDay"
                ],
                "responses": {
                    "200": {
                        "description": "Pricing Day updated",
                        "schema": {
                            "$ref": "#/definitions/PricingDay"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete pricing day",
                "description": "Deletes a single pricing day based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "pricingDayId",
                        "in": "path",
                        "description": "ID of pricing day to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "PricingDay"
                ],
                "responses": {
                    "200": {
                        "description": "Pricing Day deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/pricing_packages": {
            "get": {
                "summary": "Fetch all pricing packages",
                "description": "Returns all pricing packages from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "contest_type_id",
                        "in": "query",
                        "description": "ID of contest type to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter pricing package",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "PricingPackage"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched pricing packages",
                        "schema": {
                            "$ref": "#/definitions/PricingPackage"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new pricing package",
                "description": "Creates a new pricing package",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The pricing package JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addPricingPackage"
                        }
                    }
                ],
                "tags": [
                    "PricingPackage"
                ],
                "responses": {
                    "200": {
                        "description": "New pricing package added",
                        "schema": {
                            "$ref": "#/definitions/PricingPackage"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/pricing_packages/{pricingPackageId}": {
            "get": {
                "summary": "Fetch pricing package",
                "description": "Returns a pricing package based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "pricingPackageId",
                        "in": "path",
                        "description": "ID of pricing package to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "PricingPackage"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched pricing package",
                        "schema": {
                            "$ref": "#/definitions/PricingPackage"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update pricing package by its id",
                "description": "Update pricing package by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "pricingPackageId",
                        "in": "path",
                        "description": "ID of pricing package to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The pricing package JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addPricingPackage"
                        }
                    }
                ],
                "tags": [
                    "PricingPackage"
                ],
                "responses": {
                    "200": {
                        "description": "Pricing Package updated",
                        "schema": {
                            "$ref": "#/definitions/PricingPackage"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete pricing package",
                "description": "Deletes a single pricing package based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "pricingPackageId",
                        "in": "path",
                        "description": "ID of pricing package to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "PricingPackage"
                ],
                "responses": {
                    "200": {
                        "description": "Pricing Package deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/uploads": {
            "get": {
                "summary": "Fetch all uploads",
                "description": "Returns all uploads from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Upload"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched uploads",
                        "schema": {
                            "$ref": "#/definitions/Upload"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/uploads/{uploadId}": {
            "get": {
                "summary": "Fetch upload",
                "description": "Returns a upload based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "uploadId",
                        "in": "path",
                        "description": "ID of upload to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Upload"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched upload",
                        "schema": {
                            "$ref": "#/definitions/Upload"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/upload_hosters": {
            "get": {
                "summary": "Fetch all upload hosters",
                "description": "Returns all upload hosters from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter upload hoster",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "UploadHoster"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched upload hosters",
                        "schema": {
                            "$ref": "#/definitions/UploadHoster"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/exams": {
            "get": {
                "summary": "Fetch all exams",
                "description": "Returns all exams from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter exam",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "exam_level_id",
                        "in": "query",
                        "description": "ID of exam level to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "parent_exam_id",
                        "in": "query",
                        "description": "ID of parent exam to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "question_display_type_id",
                        "in": "query",
                        "description": "ID of question displiay type to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "exam_category_id",
                        "in": "query",
                        "description": "ID of ExamCategory to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Exam"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched exams",
                        "schema": {
                            "$ref": "#/definitions/Exam"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new exam",
                "description": "Creates a new exam",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The exam JSON you want to post.(duration must be in minute)",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addExam"
                        }
                    }
                ],
                "tags": [
                    "Exam"
                ],
                "responses": {
                    "200": {
                        "description": "New exam added",
                        "schema": {
                            "$ref": "#/definitions/Exam"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/exams/{examId}": {
            "get": {
                "summary": "Fetch exam",
                "description": "Returns a exam based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "examId",
                        "in": "path",
                        "description": "ID of exam to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Type value is \"view\"",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Exam"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched exam",
                        "schema": {
                            "$ref": "#/definitions/Exam"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update exam by its id",
                "description": "Update exam by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "examId",
                        "in": "path",
                        "description": "ID of exam to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The exam JSON you want to post.(duration must be in minute)",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addExam"
                        }
                    }
                ],
                "tags": [
                    "Exam"
                ],
                "responses": {
                    "200": {
                        "description": "Exam updated",
                        "schema": {
                            "$ref": "#/definitions/Exam"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete exam",
                "description": "Deletes a single exam based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "examId",
                        "in": "path",
                        "description": "ID of exam to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Exam"
                ],
                "responses": {
                    "200": {
                        "description": "Exam deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/exam_statuses": {
            "get": {
                "summary": "Fetch all exam_statuses",
                "description": "Returns all exam_statuses from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter project status",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "ExamStatuses"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched exam_statuses",
                        "schema": {
                            "$ref": "#/definitions/ExamStatuses"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/exams/{examId}/questions": {
            "get": {
                "summary": "Fetch exam",
                "description": "Returns a exam based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "examId",
                        "in": "path",
                        "description": "ID of exam to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Keywords to limit ( all \\ numbers)",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Exam"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched exam",
                        "schema": {
                            "$ref": "#/definitions/Question"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/exam_categories": {
            "get": {
                "summary": "Fetch all exam categories",
                "description": "Returns all exam categories from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "with_exams",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "ExamCategory"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched exam categories",
                        "schema": {
                            "$ref": "#/definitions/ExamCategory"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new exam category",
                "description": "Creates a new exam category",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The exam category JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addExamCategory"
                        }
                    }
                ],
                "tags": [
                    "ExamCategory"
                ],
                "responses": {
                    "200": {
                        "description": "New exam category added",
                        "schema": {
                            "$ref": "#/definitions/ExamCategory"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/exam_categories/{examCategoryId}": {
            "get": {
                "summary": "Fetch exam category",
                "description": "Returns a exam category based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "examCategoryId",
                        "in": "path",
                        "description": "ID of exam category to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "ExamCategory"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched exam category",
                        "schema": {
                            "$ref": "#/definitions/ExamCategory"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update exam category by its id",
                "description": "Update exam category by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "examCategoryId",
                        "in": "path",
                        "description": "ID of exam category to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The exam category JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addExamCategory"
                        }
                    }
                ],
                "tags": [
                    "ExamCategory"
                ],
                "responses": {
                    "200": {
                        "description": "Exam Category updated",
                        "schema": {
                            "$ref": "#/definitions/ExamCategory"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete exam category",
                "description": "Deletes a single exam category based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "examCategoryId",
                        "in": "path",
                        "description": "ID of exam category to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "ExamCategory"
                ],
                "responses": {
                    "200": {
                        "description": "Exam Category deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/exam_answers": {
            "get": {
                "summary": "Fetch all exam answers",
                "description": "Returns all exam answers from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "user_id",
                        "in": "query",
                        "description": "ID of user to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "exam_id",
                        "in": "query",
                        "description": "ID of exam to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "exams_user_id",
                        "in": "query",
                        "description": "ID of exam user to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "question_id",
                        "in": "query",
                        "description": "ID of question to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "ExamAnswer"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched exam answers",
                        "schema": {
                            "$ref": "#/definitions/ExamAnswer"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new exam answer",
                "description": "Creates a new exam answer",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The exam answer JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addExamAnswer"
                        }
                    }
                ],
                "tags": [
                    "ExamAnswer"
                ],
                "responses": {
                    "200": {
                        "description": "New exam answer added",
                        "schema": {
                            "$ref": "#/definitions/ExamAnswer"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/exam_answers/{examAnswerId}": {
            "get": {
                "summary": "Fetch exam answer",
                "description": "Returns a exam answer based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "examAnswerId",
                        "in": "path",
                        "description": "ID of exam answer to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "ExamAnswer"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched exam answer",
                        "schema": {
                            "$ref": "#/definitions/ExamAnswer"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete exam answer",
                "description": "Deletes a single exam answer based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "examAnswerId",
                        "in": "path",
                        "description": "ID of exam answer to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "ExamAnswer"
                ],
                "responses": {
                    "200": {
                        "description": "Exam Answer deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/exam_levels": {
            "get": {
                "summary": "Fetch all exam levels",
                "description": "Returns all exam levels from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "ExamLevel"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched exam levels",
                        "schema": {
                            "$ref": "#/definitions/ExamLevel"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new exam level",
                "description": "Creates a new exam level",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The exam level JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addExamLevel"
                        }
                    }
                ],
                "tags": [
                    "ExamLevel"
                ],
                "responses": {
                    "200": {
                        "description": "New exam level added",
                        "schema": {
                            "$ref": "#/definitions/ExamLevel"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/exam_levels/{examLevelId}": {
            "get": {
                "summary": "Fetch exam level",
                "description": "Returns a exam level based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "examLevelId",
                        "in": "path",
                        "description": "ID of exam level to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "ExamLevel"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched exam level",
                        "schema": {
                            "$ref": "#/definitions/ExamLevel"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update exam level by its id",
                "description": "Update exam level by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "examLevelId",
                        "in": "path",
                        "description": "ID of exam level to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The exam level JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addExamLevel"
                        }
                    }
                ],
                "tags": [
                    "ExamLevel"
                ],
                "responses": {
                    "200": {
                        "description": "Exam Level updated",
                        "schema": {
                            "$ref": "#/definitions/ExamLevel"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete exam level",
                "description": "Deletes a single exam level based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "examLevelId",
                        "in": "path",
                        "description": "ID of exam level to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "ExamLevel"
                ],
                "responses": {
                    "200": {
                        "description": "Exam Level deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/exams_questions": {
            "get": {
                "summary": "Fetch all exams questions",
                "description": "Returns all exams questions from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "question_id",
                        "in": "query",
                        "description": "ID of question to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "exam_id",
                        "in": "query",
                        "description": "ID of exam to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "ExamsQuestion"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched exams questions",
                        "schema": {
                            "$ref": "#/definitions/ExamsQuestion"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new exams question",
                "description": "Creates a new exams question",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The exams question JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addExamsQuestion"
                        }
                    }
                ],
                "tags": [
                    "ExamsQuestion"
                ],
                "responses": {
                    "200": {
                        "description": "New exams question added",
                        "schema": {
                            "$ref": "#/definitions/ExamsQuestion"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/exams_questions/{examsQuestionId}": {
            "get": {
                "summary": "Fetch exams question",
                "description": "Returns a exams question based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "examsQuestionId",
                        "in": "path",
                        "description": "ID of exams question to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "ExamsQuestion"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched exams question",
                        "schema": {
                            "$ref": "#/definitions/ExamsQuestion"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update exams question by its id",
                "description": "Update exams question by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "examsQuestionId",
                        "in": "path",
                        "description": "ID of exams question to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The exams question JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addExamsQuestion"
                        }
                    }
                ],
                "tags": [
                    "ExamsQuestion"
                ],
                "responses": {
                    "200": {
                        "description": "Exams Question updated",
                        "schema": {
                            "$ref": "#/definitions/ExamsQuestion"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete exams question",
                "description": "Deletes a single exams question based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "examsQuestionId",
                        "in": "path",
                        "description": "ID of exams question to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "ExamsQuestion"
                ],
                "responses": {
                    "200": {
                        "description": "Exams Question deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/exams_users": {
            "get": {
                "summary": "Fetch all exams users",
                "description": "Returns all exams users from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "user_id",
                        "in": "query",
                        "description": "ID of user to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "exam_id",
                        "in": "query",
                        "description": "ID of exam to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "exam_status_id",
                        "in": "query",
                        "description": "ID of exam status to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "ExamsUser"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched exams users",
                        "schema": {
                            "$ref": "#/definitions/ExamsUser"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new exams user",
                "description": "Creates a new exams user",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The exams user JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addExamsUser"
                        }
                    }
                ],
                "tags": [
                    "ExamsUser"
                ],
                "responses": {
                    "200": {
                        "description": "New exams user added",
                        "schema": {
                            "$ref": "#/definitions/ExamsUser"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/exams_users/{examsUserId}": {
            "get": {
                "summary": "Fetch exams user",
                "description": "Returns a exams user based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "examsUserId",
                        "in": "path",
                        "description": "ID of exams user to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "is_exam_started",
                        "in": "query",
                        "description": "Required when exam started",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "ExamsUser"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched exams user",
                        "schema": {
                            "$ref": "#/definitions/ExamsUser"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update exams user by its id",
                "description": "Update exams user by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "examsUserId",
                        "in": "path",
                        "description": "ID of exams user to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The exams user JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addExamsUser"
                        }
                    }
                ],
                "tags": [
                    "ExamsUser"
                ],
                "responses": {
                    "200": {
                        "description": "Exams User updated",
                        "schema": {
                            "$ref": "#/definitions/ExamsUser"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete exams user",
                "description": "Deletes a single exams user based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "examsUserId",
                        "in": "path",
                        "description": "ID of exams user to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "ExamsUser"
                ],
                "responses": {
                    "200": {
                        "description": "Exams User deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/me/exams_users": {
            "get": {
                "summary": "Fetch all exam users",
                "description": "Returns all exam users from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "exam_status_id",
                        "in": "query",
                        "description": "ID of exam to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "ExamsUsers"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched Exams users",
                        "schema": {
                            "$ref": "#/definitions/ExamsUser"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/educations": {
            "get": {
                "summary": "Fetch all educations",
                "description": "Returns all educations from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "user_id",
                        "in": "query",
                        "description": "Id of user to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Education"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched educations",
                        "schema": {
                            "$ref": "#/definitions/Education"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new education",
                "description": "Creates a new education",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The education JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addEducation"
                        }
                    }
                ],
                "tags": [
                    "Education"
                ],
                "responses": {
                    "200": {
                        "description": "New education added",
                        "schema": {
                            "$ref": "#/definitions/Education"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/educations/{educationId}": {
            "get": {
                "summary": "Fetch education",
                "description": "Returns a education based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "educationId",
                        "in": "path",
                        "description": "ID of education to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Education"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched education",
                        "schema": {
                            "$ref": "#/definitions/Education"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update education by its id",
                "description": "Update education by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "educationId",
                        "in": "path",
                        "description": "ID of education to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The education JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addEducation"
                        }
                    }
                ],
                "tags": [
                    "Education"
                ],
                "responses": {
                    "200": {
                        "description": "Education updated",
                        "schema": {
                            "$ref": "#/definitions/Education"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete education",
                "description": "Deletes a single education based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "educationId",
                        "in": "path",
                        "description": "ID of education to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Education"
                ],
                "responses": {
                    "200": {
                        "description": "Education deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/certifications": {
            "get": {
                "summary": "Fetch all certifications",
                "description": "Returns all certifications from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "user_id",
                        "in": "query",
                        "description": "ID of user to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Certification"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched certifications",
                        "schema": {
                            "$ref": "#/definitions/Certification"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new certification",
                "description": "Creates a new certification",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The certification JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addCertification"
                        }
                    }
                ],
                "tags": [
                    "Certification"
                ],
                "responses": {
                    "200": {
                        "description": "New certification added",
                        "schema": {
                            "$ref": "#/definitions/Certification"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/certifications/{certificationId}": {
            "get": {
                "summary": "Fetch certification",
                "description": "Returns a certification based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "certificationId",
                        "in": "path",
                        "description": "ID of certification to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Certification"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched certification",
                        "schema": {
                            "$ref": "#/definitions/Certification"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update certification by its id",
                "description": "Update certification by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "certificationId",
                        "in": "path",
                        "description": "ID of certification to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The certification JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addCertification"
                        }
                    }
                ],
                "tags": [
                    "Certification"
                ],
                "responses": {
                    "200": {
                        "description": "Certification updated",
                        "schema": {
                            "$ref": "#/definitions/Certification"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete certification",
                "description": "Deletes a single certification based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "certificationId",
                        "in": "path",
                        "description": "ID of certification to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Certification"
                ],
                "responses": {
                    "200": {
                        "description": "Certification deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/projects": {
            "get": {
                "summary": "Fetch all projects",
                "description": "Returns all projects from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter project",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "project_categories",
                        "in": "query",
                        "description": "project categories filter",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "skills",
                        "in": "query",
                        "description": "skills filter",
                        "required": false,
                        "type": "string",
                         "format": "string"
                    },
                    {
                        "name": "project_range_id",
                        "in": "query",
                        "description": "ID of project range to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "project_status_id",
                        "in": "query",
                        "description": "ID separate with commas",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Type value is (my_skills / bookmarked / price_range)",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "price_range_min",
                        "in": "query",
                        "description": "Minimum price range",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "price_range_max",
                        "in": "query",
                        "description": "Maximum price range",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched projects",
                        "schema": {
                            "$ref": "#/definitions/Project"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new project",
                "description": "Creates a new project",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The project JSON you want to post (project_status_id - 1 or 4, 1 - draft and 4 - project to open). Add skills by comma seperated value",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addProject"
                        }
                    }
                ],
                "tags": [
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "New project added",
                        "schema": {
                            "$ref": "#/definitions/Project"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/projects/{projectId}": {
            "get": {
                "summary": "Fetch project",
                "description": "Returns a project based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "ID of project to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Type value is \"view\"",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched project",
                        "schema": {
                            "$ref": "#/definitions/Project"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update project by its id",
                "description": "Update project by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "ID of project to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The project JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addProject"
                        }
                    }
                ],
                "tags": [
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "Project updated",
                        "schema": {
                            "$ref": "#/definitions/Project"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete project",
                "description": "Deletes a single project based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "ID of project to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "Project deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/employer/me/pay_stats": {
            "get": {
                "summary": "Fetch project",
                "description": "Returns a project based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched project",
                        "schema": {
                            "$ref": "#/definitions/Project"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
		},
        "/projects/{projectId}/update_status": {
            "put": {
                "summary": "Update project by its id",
                "description": "Update project by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "ID of project to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The project JSON you want to post and if it is Mutual Cancel request please mention note in 'message'. We can use in following project status ( EmployerCanceled / MutuallyCanceled / OpenForBidding / UnderDevelopment / Completed)",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/updateProject"
                        }
                    }
                ],
                "tags": [
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "Project updated",
                        "schema": {
                            "$ref": "#/definitions/Project"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/users/{userId}/active_projects": {
            "get": {
                "summary": "Fetch all projects",
                "description": "Returns all active projects from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "ID of user",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter active projects",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "project_status_id",
                        "in": "query",
                        "description": "ID of project to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched money transfer accounts",
                        "schema": {
                            "$ref": "#/definitions/Project"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/project_bid_invoices": {
            "get": {
                "summary": "Fetch all project bid invoices",
                "description": "Returns all project bid invoices from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "project_id",
                        "in": "query",
                        "description": "ID of project to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "bid_id",
                        "in": "query",
                        "description": "ID of bid to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "ProjectBidInvoice"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched project bid invoices",
                        "schema": {
                            "$ref": "#/definitions/ProjectBidInvoice"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new project bid invoice",
                "description": "Creates a new project bid invoice",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The project bid invoice JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addProjectBidInvoice"
                        }
                    }
                ],
                "tags": [
                    "ProjectBidInvoice"
                ],
                "responses": {
                    "200": {
                        "description": "New project bid invoice added",
                        "schema": {
                            "$ref": "#/definitions/ProjectBidInvoice"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/project_bid_invoices/{projectBidInvoiceId}": {
            "get": {
                "summary": "Fetch project bid invoice",
                "description": "Returns a project bid invoice based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "projectBidInvoiceId",
                        "in": "path",
                        "description": "ID of project bid invoice to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "ProjectBidInvoice"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched project bid invoice",
                        "schema": {
                            "$ref": "#/definitions/ProjectBidInvoice"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update project bid invoice by its id",
                "description": "Update project bid invoice by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "projectBidInvoiceId",
                        "in": "path",
                        "description": "ID of project bid invoice to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The project bid invoice JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addProjectBidInvoice"
                        }
                    }
                ],
                "tags": [
                    "ProjectBidInvoice"
                ],
                "responses": {
                    "200": {
                        "description": "Project Bid Invoice updated",
                        "schema": {
                            "$ref": "#/definitions/ProjectBidInvoice"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete project bid invoice",
                "description": "Deletes a single project bid invoice based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "projectBidInvoiceId",
                        "in": "path",
                        "description": "ID of project bid invoice to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "ProjectBidInvoice"
                ],
                "responses": {
                    "200": {
                        "description": "Project Bid Invoice deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/me/project_bid_invoices": {
            "get": {
                "summary": "Fetch all project bid invoices",
                "description": "Returns all project bid invoices from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "project_id",
                        "in": "query",
                        "description": "ID of project to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "bid_id",
                        "in": "query",
                        "description": "ID of bid to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "ProjectBidInvoice"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched project bid invoices",
                        "schema": {
                            "$ref": "#/definitions/ProjectBidInvoice"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/employer/{employerId}/project_bid_invoices": {
            "get": {
                "summary": "Fetch all project bid invoices",
                "description": "Returns all project bid invoices from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "employerId",
                        "in": "path",
                        "description": "ID of project to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "project_id",
                        "in": "query",
                        "description": "ID of project to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "bid_id",
                        "in": "query",
                        "description": "ID of bid to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "ProjectBidInvoice"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched project bid invoices",
                        "schema": {
                            "$ref": "#/definitions/ProjectBidInvoice"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/project_categories": {
            "get": {
                "summary": "Fetch all project categories",
                "description": "Returns all project categories from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter project category",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Keywords to limit ( all \\ numbers)",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "ProjectCategory"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched project categories",
                        "schema": {
                            "$ref": "#/definitions/ProjectCategory"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new project category",
                "description": "Creates a new project category",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The project category JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addProjectCategory"
                        }
                    }
                ],
                "tags": [
                    "ProjectCategory"
                ],
                "responses": {
                    "200": {
                        "description": "New project category added",
                        "schema": {
                            "$ref": "#/definitions/ProjectCategory"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/project_categories/{projectCategoryId}": {
            "get": {
                "summary": "Fetch project category",
                "description": "Returns a project category based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "projectCategoryId",
                        "in": "path",
                        "description": "ID of project category to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "ProjectCategory"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched project category",
                        "schema": {
                            "$ref": "#/definitions/ProjectCategory"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update project category by its id",
                "description": "Update project category by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "projectCategoryId",
                        "in": "path",
                        "description": "ID of project category to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The project category JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addProjectCategory"
                        }
                    }
                ],
                "tags": [
                    "ProjectCategory"
                ],
                "responses": {
                    "200": {
                        "description": "Project Category updated",
                        "schema": {
                            "$ref": "#/definitions/ProjectCategory"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete project category",
                "description": "Deletes a single project category based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "projectCategoryId",
                        "in": "path",
                        "description": "ID of project category to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "ProjectCategory"
                ],
                "responses": {
                    "200": {
                        "description": "Project Category deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/project_disputes": {
            "get": {
                "summary": "Fetch all project disputes",
                "description": "Returns all project disputes from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "project_id",
                        "in": "query",
                        "description": "ID of project to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "dispute_open_type_id",
                        "in": "query",
                        "description": "ID of dispute open type to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "dispute_status_id",
                        "in": "query",
                        "description": "ID of dispute status to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "dispute_closed_type_id",
                        "in": "query",
                        "description": "ID of dispute closed type to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "bid_id",
                        "in": "query",
                        "description": "ID of bid to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "ProjectDispute"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched project disputes",
                        "schema": {
                            "$ref": "#/definitions/ProjectDispute"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new project dispute",
                "description": "Creates a new project dispute",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The project dispute JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addProjectDispute"
                        }
                    }
                ],
                "tags": [
                    "ProjectDispute"
                ],
                "responses": {
                    "200": {
                        "description": "New project dispute added",
                        "schema": {
                            "$ref": "#/definitions/ProjectDispute"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/project_disputes/{projectDisputeId}": {
            "get": {
                "summary": "Fetch project dispute",
                "description": "Returns a project dispute based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "projectDisputeId",
                        "in": "path",
                        "description": "ID of project dispute to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "ProjectDispute"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched project dispute",
                        "schema": {
                            "$ref": "#/definitions/ProjectDispute"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update project dispute by its id",
                "description": "Update project dispute by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "projectDisputeId",
                        "in": "path",
                        "description": "ID of project dispute to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The project dispute JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/updateProjectDispute"
                        }
                    }
                ],
                "tags": [
                    "ProjectDispute"
                ],
                "responses": {
                    "200": {
                        "description": "Project Dispute updated",
                        "schema": {
                            "$ref": "#/definitions/ProjectDispute"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete project dispute",
                "description": "Deletes a single project dispute based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "projectDisputeId",
                        "in": "path",
                        "description": "ID of project dispute to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "ProjectDispute"
                ],
                "responses": {
                    "200": {
                        "description": "Project Dispute deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/project_ranges": {
            "get": {
                "summary": "Fetch all project ranges",
                "description": "Returns all project ranges from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter project range",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Keywords to limit ( all \\ numbers)",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "ProjectRange"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched project ranges",
                        "schema": {
                            "$ref": "#/definitions/ProjectRange"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new project range",
                "description": "Creates a new project range",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The project range JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addProjectRange"
                        }
                    }
                ],
                "tags": [
                    "ProjectRange"
                ],
                "responses": {
                    "200": {
                        "description": "New project range added",
                        "schema": {
                            "$ref": "#/definitions/ProjectRange"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/project_ranges/{projectRangeId}": {
            "get": {
                "summary": "Fetch project range",
                "description": "Returns a project range based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "projectRangeId",
                        "in": "path",
                        "description": "ID of project range to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "ProjectRange"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched project range",
                        "schema": {
                            "$ref": "#/definitions/ProjectRange"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update project range by its id",
                "description": "Update project range by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "projectRangeId",
                        "in": "path",
                        "description": "ID of project range to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The project range JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addProjectRange"
                        }
                    }
                ],
                "tags": [
                    "ProjectRange"
                ],
                "responses": {
                    "200": {
                        "description": "Project Range updated",
                        "schema": {
                            "$ref": "#/definitions/ProjectRange"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete project range",
                "description": "Deletes a single project range based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "projectRangeId",
                        "in": "path",
                        "description": "ID of project range to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "ProjectRange"
                ],
                "responses": {
                    "200": {
                        "description": "Project Range deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/project_statuses": {
            "get": {
                "summary": "Fetch all project statuses",
                "description": "Returns all project statuses from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter project status",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "ProjectStatus"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched project statuses",
                        "schema": {
                            "$ref": "#/definitions/ProjectStatus"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/project_attachment": {
            "get": {
                "summary": "Fetch all project attachment",
                "description": "Returns all project attachment from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "project_id",
                        "in": "query",
                        "description": "ID of project to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "ProjectAttachment"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched project attachment",
                        "schema": {
                            "$ref": "#/definitions/ProjectAttachment"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new project attachment",
                "description": "Creates a new project attachment",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The project attachment JSON you want to post (class name should be ProjectDocument)",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addProjectAttachment"
                        }
                    }
                ],
                "tags": [
                    "ProjectAttachment"
                ],
                "responses": {
                    "200": {
                        "description": "New project attachment added",
                        "schema": {
                            "$ref": "#/definitions/ProjectAttachment"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/project_attachment/{attachmentId}": {
            "delete": {
                "summary": "Delete Project Attachment",
                "description": "Deletes a single Project Attachment based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "attachmentId",
                        "in": "path",
                        "description": "ID of attachment to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "ProjectAttachment"
                ],
                "responses": {
                    "200": {
                        "description": "Project Attachment deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/dispute_closed_types": {
            "get": {
                "summary": "Fetch all dispute closed types",
                "description": "Returns all dispute closed types from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "dispute_open_type_id",
                        "in": "query",
                        "description": "Fetch dispute_open_type_id",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "project_role_id",
                        "in": "query",
                        "description": "3-Employer, 4-Freelancer",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "DisputeClosedType"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched dispute closed types",
                        "schema": {
                            "$ref": "#/definitions/DisputeClosedType"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/dispute_open_types": {
            "get": {
                "summary": "Fetch all dispute open types",
                "description": "Returns all dispute open types from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter dispute open type",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "DisputeOpenType"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched dispute open types",
                        "schema": {
                            "$ref": "#/definitions/DisputeOpenType"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/dispute_statuses": {
            "get": {
                "summary": "Fetch all dispute statuses",
                "description": "Returns all dispute statuses from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "DisputeStatus"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched dispute statuses",
                        "schema": {
                            "$ref": "#/definitions/DisputeStatus"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/work_profiles": {
            "get": {
                "summary": "Fetch all work profiles",
                "description": "Returns all work profiles from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "user_id",
                        "in": "query",
                        "description": "ID of user to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "WorkProfile"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched work profiles",
                        "schema": {
                            "$ref": "#/definitions/WorkProfile"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new work profile",
                "description": "Creates a new work profile",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The work profile JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addWorkProfile"
                        }
                    }
                ],
                "tags": [
                    "WorkProfile"
                ],
                "responses": {
                    "200": {
                        "description": "New work profile added",
                        "schema": {
                            "$ref": "#/definitions/WorkProfile"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/work_profiles/{workProfileId}": {
            "get": {
                "summary": "Fetch work profile",
                "description": "Returns a work profile based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "workProfileId",
                        "in": "path",
                        "description": "ID of work profile to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "WorkProfile"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched work profile",
                        "schema": {
                            "$ref": "#/definitions/WorkProfile"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update work profile by its id",
                "description": "Update work profile by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "workProfileId",
                        "in": "path",
                        "description": "ID of work profile to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The work profile JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addWorkProfile"
                        }
                    }
                ],
                "tags": [
                    "WorkProfile"
                ],
                "responses": {
                    "200": {
                        "description": "Work Profile updated",
                        "schema": {
                            "$ref": "#/definitions/WorkProfile"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete work profile",
                "description": "Deletes a single work profile based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "workProfileId",
                        "in": "path",
                        "description": "ID of work profile to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "WorkProfile"
                ],
                "responses": {
                    "200": {
                        "description": "Work Profile deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/publications": {
            "get": {
                "summary": "Fetch all publications",
                "description": "Returns all publications from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "user_id",
                        "in": "query",
                        "description": "ID of user to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Publication"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched publications",
                        "schema": {
                            "$ref": "#/definitions/Publication"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new publication",
                "description": "Creates a new publication",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The publication JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addPublication"
                        }
                    }
                ],
                "tags": [
                    "Publication"
                ],
                "responses": {
                    "200": {
                        "description": "New publication added",
                        "schema": {
                            "$ref": "#/definitions/Publication"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/publications/{publicationId}": {
            "get": {
                "summary": "Fetch publication",
                "description": "Returns a publication based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "publicationId",
                        "in": "path",
                        "description": "ID of publication to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Publication"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched publication",
                        "schema": {
                            "$ref": "#/definitions/Publication"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update publication by its id",
                "description": "Update publication by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "publicationId",
                        "in": "path",
                        "description": "ID of publication to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The publication JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addPublication"
                        }
                    }
                ],
                "tags": [
                    "Publication"
                ],
                "responses": {
                    "200": {
                        "description": "Publication updated",
                        "schema": {
                            "$ref": "#/definitions/Publication"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete publication",
                "description": "Deletes a single publication based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "publicationId",
                        "in": "path",
                        "description": "ID of publication to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Publication"
                ],
                "responses": {
                    "200": {
                        "description": "Publication deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/bids": {
            "get": {
                "summary": "Fetch all bids",
                "description": "Returns all bids from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "bid_status_id",
                        "in": "query",
                        "description": "ID of bids status to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "project_id",
                        "in": "query",
                        "description": "ID of project to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "project_bid_id",
                        "in": "query",
                        "description": "ID of project bid id to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "user_id",
                        "in": "query",
                        "description": "ID of user to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "is_freelancer_withdrawn",
                        "in": "query",
                        "description": "ID of is_freelancer_withdrawn to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Bid"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched bids",
                        "schema": {
                            "$ref": "#/definitions/Bid"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new bid",
                "description": "Creates a new bid",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The bid JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addBid"
                        }
                    }
                ],
                "tags": [
                    "Bid"
                ],
                "responses": {
                    "200": {
                        "description": "New bid added",
                        "schema": {
                            "$ref": "#/definitions/Bid"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/bids/{bidId}": {
            "get": {
                "summary": "Fetch bid",
                "description": "Returns a bid based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "bidId",
                        "in": "path",
                        "description": "ID of bid to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Bid"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched bid",
                        "schema": {
                            "$ref": "#/definitions/Bid"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update bid by its id",
                "description": "Update bid by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "bidId",
                        "in": "path",
                        "description": "ID of bid to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The bid JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/updateBids"
                        }
                    }
                ],
                "tags": [
                    "Bid"
                ],
                "responses": {
                    "200": {
                        "description": "Bid updated",
                        "schema": {
                            "$ref": "#/definitions/Bid"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete bid",
                "description": "Deletes a single bid based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "bidId",
                        "in": "path",
                        "description": "ID of bid to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Bid"
                ],
                "responses": {
                    "200": {
                        "description": "Bid deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/bids/{bidId}/update_status": {
            "put": {
                "summary": "Update bid by its id",
                "description": "Update bid by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "bidId",
                        "in": "path",
                        "description": "ID of bid to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The bid JSON you want to post. We can use the following status (WinnerSelected / WaitingForEscrow / UnderDevelopment)",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/updateBid"
                        }
                    }
                ],
                "tags": [
                    "Bid"
                ],
                "responses": {
                    "200": {
                        "description": "Bid updated",
                        "schema": {
                            "$ref": "#/definitions/Bid"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/me/bids": {
            "get": {
                "summary": "Fetch all bids",
                "description": "Returns all bids from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "bid_status_id",
                        "in": "query",
                        "description": "ID of bids status to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "project_id",
                        "in": "query",
                        "description": "ID of project to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Type value is (active/ current_work/ past_projects)",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Bid"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched bids",
                        "schema": {
                            "$ref": "#/definitions/Bid"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/employer/{employerId}/bids": {
            "get": {
                "summary": "Fetch all bids",
                "description": "Returns all bids from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "employerId",
                        "in": "path",
                        "description": "ID of bids to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "bid_status_id",
                        "in": "query",
                        "description": "ID of bids status to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "project_id",
                        "in": "query",
                        "description": "ID of project to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Bid"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched bids",
                        "schema": {
                            "$ref": "#/definitions/Bid"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/bids/{userId}/project_stats": {
            "get": {
                "summary": "Fetch all bids",
                "description": "Returns all bids from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "ID of user to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }                    
                ],
                "tags": [
                    "Bid"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched bids",
                        "schema": {
                            "$ref": "#/definitions/Bid"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/freelancer/me/bids/stats": {
            "get": {
                "summary": "Fetch all bids",
                "description": "Returns all bids from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Bid"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched bids",
                        "schema": {
                            "$ref": "#/definitions/Bid"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/bids/{bidId}/payment_escrow": {
            "put": {
                "summary": "Update bid by its id",
                "description": "Update bid by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "bidId",
                        "in": "path",
                        "description": "ID of bid to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The bid JSON you want to post (milestone_id not mandatory)",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/updatesBid"
                        }
                    }
                ],
                "tags": [
                    "Bid"
                ],
                "responses": {
                    "200": {
                        "description": "Bid updated",
                        "schema": {
                            "$ref": "#/definitions/Bid"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/bids/{bidId}/dispute_open_types": {
            "get": {
                "summary": "Fetch all bids",
                "description": "Returns all bids from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "bidId",
                        "in": "path",
                        "description": "ID of bids to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Bid"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched bids",
                        "schema": {
                            "$ref": "#/definitions/Bid"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/bid_statuses": {
            "get": {
                "summary": "Fetch all bid statuses",
                "description": "Returns all bid statuses from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter bid status",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "BidStatus"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched bid statuses",
                        "schema": {
                            "$ref": "#/definitions/BidStatus"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/milestones": {
            "get": {
                "summary": "Fetch all milestones",
                "description": "Returns all milestones from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "project_id",
                        "in": "query",
                        "description": "ID of bid to update",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "milestone_status_id",
                        "in": "query",
                        "description": "ID of bid to update",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "bid_id",
                        "in": "query",
                        "description": "ID of bid to update",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Milestone"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched milestones",
                        "schema": {
                            "$ref": "#/definitions/Milestone"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new milestone",
                "description": "Creates a new milestone",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The milestone JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addMilestone"
                        }
                    }
                ],
                "tags": [
                    "Milestone"
                ],
                "responses": {
                    "200": {
                        "description": "New milestone added",
                        "schema": {
                            "$ref": "#/definitions/Milestone"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/milestones/{milestoneId}": {
            "get": {
                "summary": "Fetch milestone",
                "description": "Returns a milestone based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "milestoneId",
                        "in": "path",
                        "description": "ID of milestone to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Milestone"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched milestone",
                        "schema": {
                            "$ref": "#/definitions/Milestone"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update milestone by its id",
                "description": "Update milestone by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "milestoneId",
                        "in": "path",
                        "description": "ID of milestone to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The milestone JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/updateMilestones"
                        }
                    }
                ],
                "tags": [
                    "Milestone"
                ],
                "responses": {
                    "200": {
                        "description": "Milestone updated",
                        "schema": {
                            "$ref": "#/definitions/Milestone"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete milestone",
                "description": "Deletes a single milestone based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "milestoneId",
                        "in": "path",
                        "description": "ID of milestone to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Milestone"
                ],
                "responses": {
                    "200": {
                        "description": "Milestone deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/milestones/{milestoneId}/update_status": {
            "put": {
                "summary": "Update milestone by its id",
                "description": "Update milestone by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "milestoneId",
                        "in": "path",
                        "description": "ID of milestone to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The milestone JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/updateMilestone"
                        }
                    }
                ],
                "tags": [
                    "Milestone"
                ],
                "responses": {
                    "200": {
                        "description": "Milestone updated",
                        "schema": {
                            "$ref": "#/definitions/Milestone"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/me/milestones": {
            "get": {
                "summary": "Fetch all milestones",
                "description": "Returns all milestones from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "project_id",
                        "in": "query",
                        "description": "ID of bid to update",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "milestone_status_id",
                        "in": "query",
                        "description": "ID of bid to update",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "bid_id",
                        "in": "query",
                        "description": "ID of bid to update",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Milestone"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched milestones",
                        "schema": {
                            "$ref": "#/definitions/Milestone"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/employer/{employerId}/milestones": {
            "get": {
                "summary": "Fetch all milestones",
                "description": "Returns all milestones from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "employerId",
                        "in": "path",
                        "description": "ID of project to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "project_id",
                        "in": "query",
                        "description": "ID of bid to update",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "milestone_status_id",
                        "in": "query",
                        "description": "ID of bid to update",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "bid_id",
                        "in": "query",
                        "description": "ID of bid to update",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Milestone"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched milestones",
                        "schema": {
                            "$ref": "#/definitions/Milestone"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/milestone_statuses": {
            "get": {
                "summary": "Fetch all milestone statuses",
                "description": "Returns all milestone statuses from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter milestone status",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "project_id",
                        "in": "query",
                        "description": "ID of project to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "user_id",
                        "in": "query",
                        "description": "ID of user to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "MilestoneStatus"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched milestone statuses",
                        "schema": {
                            "$ref": "#/definitions/MilestoneStatus"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/milestone_statuses/{milestoneStatusId}": {
            "get": {
                "summary": "Fetch milestone",
                "description": "Returns a milestone based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "milestoneStatusId",
                        "in": "path",
                        "description": "ID of milestone status to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "MilestoneStatus"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched milestone status",
                        "schema": {
                            "$ref": "#/definitions/MilestoneStatus"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/me/projects": {
            "get": {
                "summary": "Fetch all project",
                "description": "Returns all project from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "project_status_id",
                        "in": "query",
                        "description": "ID of project status to fetch (Can give comma separate values)",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched projects",
                        "schema": {
                            "$ref": "#/definitions/Project"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/employer/me/projects/stats": {
            "get": {
                "summary": "Fetch project",
                "description": "Returns a project based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched project",
                        "schema": {
                            "$ref": "#/definitions/Project"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/projects/{user_id}/project_stats": {
            "get": {
                "summary": "Fetch project",
                "description": "Returns a project based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "ID of user to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Project"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched project",
                        "schema": {
                            "$ref": "#/definitions/Project"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/questions": {
            "get": {
                "summary": "Fetch all questions",
                "description": "Returns all questions from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter question",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "question_category_id",
                        "in": "query",
                        "description": "ID of question category to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Question"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched questions",
                        "schema": {
                            "$ref": "#/definitions/Question"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new question",
                "description": "Creates a new question",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The question JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addQuestion"
                        }
                    }
                ],
                "tags": [
                    "Question"
                ],
                "responses": {
                    "200": {
                        "description": "New question added",
                        "schema": {
                            "$ref": "#/definitions/Question"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/questions/{questionId}": {
            "get": {
                "summary": "Fetch question",
                "description": "Returns a question based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "questionId",
                        "in": "path",
                        "description": "ID of question to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Question"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched question",
                        "schema": {
                            "$ref": "#/definitions/Question"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update question by its id",
                "description": "Update question by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "questionId",
                        "in": "path",
                        "description": "ID of question to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The question JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addQuestion"
                        }
                    }
                ],
                "tags": [
                    "Question"
                ],
                "responses": {
                    "200": {
                        "description": "Question updated",
                        "schema": {
                            "$ref": "#/definitions/Question"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete question",
                "description": "Deletes a single question based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "questionId",
                        "in": "path",
                        "description": "ID of question to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Question"
                ],
                "responses": {
                    "200": {
                        "description": "Question deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/question_categories": {
            "get": {
                "summary": "Fetch all question categories",
                "description": "Returns all question categories from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "QuestionCategory"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched question categories",
                        "schema": {
                            "$ref": "#/definitions/QuestionCategory"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new question category",
                "description": "Creates a new question category",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The question category JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addQuestionCategory"
                        }
                    }
                ],
                "tags": [
                    "QuestionCategory"
                ],
                "responses": {
                    "200": {
                        "description": "New question category added",
                        "schema": {
                            "$ref": "#/definitions/QuestionCategory"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/question_categories/{questionCategoryId}": {
            "get": {
                "summary": "Fetch question category",
                "description": "Returns a question category based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "questionCategoryId",
                        "in": "path",
                        "description": "ID of question category to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "QuestionCategory"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched question category",
                        "schema": {
                            "$ref": "#/definitions/QuestionCategory"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update question category by its id",
                "description": "Update question category by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "questionCategoryId",
                        "in": "path",
                        "description": "ID of question category to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The question category JSON you want to post and if you want to post multiple 'answer_options' fields that  should be comma separated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addQuestionCategory"
                        }
                    }
                ],
                "tags": [
                    "QuestionCategory"
                ],
                "responses": {
                    "200": {
                        "description": "Question Category updated",
                        "schema": {
                            "$ref": "#/definitions/QuestionCategory"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete question category",
                "description": "Deletes a single question category based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "questionCategoryId",
                        "in": "path",
                        "description": "ID of question category to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "QuestionCategory"
                ],
                "responses": {
                    "200": {
                        "description": "Question Category deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/question_display_types": {
            "get": {
                "summary": "Fetch all question display types",
                "description": "Returns all question display types from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "QuestionDisplayType"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched question display types",
                        "schema": {
                            "$ref": "#/definitions/QuestionDisplayType"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/question_display_types/{questionDisplayTypeId}": {
            "get": {
                "summary": "Fetch question display type",
                "description": "Returns a question display type based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "questionDisplayTypeId",
                        "in": "path",
                        "description": "ID of question display type to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "QuestionDisplayType"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched question display type",
                        "schema": {
                            "$ref": "#/definitions/QuestionDisplayType"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/jobs": {
            "get": {
                "summary": "Fetch all jobs",
                "description": "Returns all jobs from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "skills",
                        "in": "query",
                        "description": "skills filter",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "job_categories",
                        "in": "query",
                        "description": "job_categories filter",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "job_types",
                        "in": "query",
                        "description": "job_types filter",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "job_status_id",
                        "in": "query",
                        "description": "ID of job to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "user_id",
                        "in": "query",
                        "description": "ID of user to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "is_featured",
                        "in": "query",
                        "description": "is_featured to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "is_urgent",
                        "in": "query",
                        "description": "is_urgent to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Job"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched jobs",
                        "schema": {
                            "$ref": "#/definitions/Job"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new job",
                "description": "Creates a new job",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The job JSON you want to post and ('apply_via') field values should be ( via_our_site / via_company )",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addJob"
                        }
                    }
                ],
                "tags": [
                    "Job"
                ],
                "responses": {
                    "200": {
                        "description": "New job added",
                        "schema": {
                            "$ref": "#/definitions/Job"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/jobs/{jobId}": {
            "get": {
                "summary": "Fetch job",
                "description": "Returns a job based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "jobId",
                        "in": "path",
                        "description": "ID of job to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Type value is \"view\"",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Job"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched job",
                        "schema": {
                            "$ref": "#/definitions/Job"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update job by its id",
                "description": "Update job by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "jobId",
                        "in": "path",
                        "description": "ID of job to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The job JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/updateJob"
                        }
                    }
                ],
                "tags": [
                    "Job"
                ],
                "responses": {
                    "200": {
                        "description": "Job updated",
                        "schema": {
                            "$ref": "#/definitions/Job"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete job",
                "description": "Deletes a single job based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "jobId",
                        "in": "path",
                        "description": "ID of job to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Job"
                ],
                "responses": {
                    "200": {
                        "description": "Job deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/me/jobs": {
            "get": {
                "summary": "Fetch all jobs",
                "description": "Returns all jobs from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "job_status_id",
                        "in": "query",
                        "description": "ID of job to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Job"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched jobs",
                        "schema": {
                            "$ref": "#/definitions/Job"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/employer/{employerId}/jobs/stats": {
            "get": {
                "summary": "Fetch job",
                "description": "Returns a job based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "employerId",
                        "in": "path",
                        "description": "ID of job to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Job"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched job",
                        "schema": {
                            "$ref": "#/definitions/Job"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/job_applies": {
            "get": {
                "summary": "Fetch all job applies",
                "description": "Returns all job applies from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "user_id",
                        "in": "query",
                        "description": "ID of user to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "job_id",
                        "in": "query",
                        "description": "ID of job to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "JobApply"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched job applies",
                        "schema": {
                            "$ref": "#/definitions/JobApply"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new job apply",
                "description": "Creates a new job apply",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The job apply JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addJobApply"
                        }
                    }
                ],
                "tags": [
                    "JobApply"
                ],
                "responses": {
                    "200": {
                        "description": "New job apply added",
                        "schema": {
                            "$ref": "#/definitions/JobApply"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/job_applies/{jobApplyId}": {
            "get": {
                "summary": "Fetch job apply",
                "description": "Returns a job apply based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "jobApplyId",
                        "in": "path",
                        "description": "ID of job apply to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "JobApply"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched job apply",
                        "schema": {
                            "$ref": "#/definitions/JobApply"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update job apply by its id",
                "description": "Update job apply by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "jobApplyId",
                        "in": "path",
                        "description": "ID of job apply to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The job apply JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/updateJobApply"
                        }
                    }
                ],
                "tags": [
                    "JobApply"
                ],
                "responses": {
                    "200": {
                        "description": "Job Apply updated",
                        "schema": {
                            "$ref": "#/definitions/JobApply"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete job apply",
                "description": "Deletes a single job apply based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "jobApplyId",
                        "in": "path",
                        "description": "ID of job apply to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "JobApply"
                ],
                "responses": {
                    "200": {
                        "description": "Job Apply deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/me/job_applies": {
            "get": {
                "summary": "Fetch all job applies",
                "description": "Returns all job applies from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "JobApply"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched job applies",
                        "schema": {
                            "$ref": "#/definitions/JobApply"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/employer/{employerId}/job_applies": {
            "get": {
                "summary": "Fetch job apply",
                "description": "Returns a job apply based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "employerId",
                        "in": "path",
                        "description": "ID of job apply to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "job_apply_status_id",
                        "in": "query",
                        "description": "ID of job apply to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "JobApply"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched job apply",
                        "schema": {
                            "$ref": "#/definitions/JobApply"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/employer/{employerId}/job_applies/stats": {
            "get": {
                "summary": "Fetch job apply",
                "description": "Returns a job apply based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "employerId",
                        "in": "path",
                        "description": "ID of job apply to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "JobApply"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched job apply",
                        "schema": {
                            "$ref": "#/definitions/JobApply"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/job_apply_clicks": {
            "get": {
                "summary": "Fetch all job apply clicks",
                "description": "Returns all job apply clicks from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "user_id",
                        "in": "query",
                        "description": "ID of user to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "job_id",
                        "in": "query",
                        "description": "ID of job to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "JobApplyClick"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched job apply clicks",
                        "schema": {
                            "$ref": "#/definitions/JobApplyClick"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new job apply click",
                "description": "Creates a new job apply click",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The job apply click JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addJobApplyClick"
                        }
                    }
                ],
                "tags": [
                    "JobApplyClick"
                ],
                "responses": {
                    "200": {
                        "description": "New job apply click added",
                        "schema": {
                            "$ref": "#/definitions/JobApplyClick"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/job_apply_clicks/{jobApplyClickId}": {
            "get": {
                "summary": "Fetch job apply click",
                "description": "Returns a job apply click based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "jobApplyClickId",
                        "in": "path",
                        "description": "ID of job apply click to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "JobApplyClick"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched job apply click",
                        "schema": {
                            "$ref": "#/definitions/JobApplyClick"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete job apply click",
                "description": "Deletes a single job apply click based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "jobApplyClickId",
                        "in": "path",
                        "description": "ID of job apply click to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "JobApplyClick"
                ],
                "responses": {
                    "200": {
                        "description": "Job Apply Click deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/job_apply_statuses": {
            "get": {
                "summary": "Fetch all job apply statuses",
                "description": "Returns all job apply statuses from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "JobApplyStatus"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched job apply statuses",
                        "schema": {
                            "$ref": "#/definitions/JobApplyStatus"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/job_categories": {
            "get": {
                "summary": "Fetch all job categories",
                "description": "Returns all job categories from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter job category",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Keywords to limit ( all \\ numbers)",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "JobCategory"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched job categories",
                        "schema": {
                            "$ref": "#/definitions/JobCategory"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new job category",
                "description": "Creates a new job category",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The job category JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addJobCategory"
                        }
                    }
                ],
                "tags": [
                    "JobCategory"
                ],
                "responses": {
                    "200": {
                        "description": "New job category added",
                        "schema": {
                            "$ref": "#/definitions/JobCategory"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/job_categories/{jobCategoryId}": {
            "get": {
                "summary": "Fetch job category",
                "description": "Returns a job category based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "jobCategoryId",
                        "in": "path",
                        "description": "ID of job category to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "JobCategory"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched job category",
                        "schema": {
                            "$ref": "#/definitions/JobCategory"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update job category by its id",
                "description": "Update job category by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "jobCategoryId",
                        "in": "path",
                        "description": "ID of job category to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The job category JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addJobCategory"
                        }
                    }
                ],
                "tags": [
                    "JobCategory"
                ],
                "responses": {
                    "200": {
                        "description": "Job Category updated",
                        "schema": {
                            "$ref": "#/definitions/JobCategory"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete job category",
                "description": "Deletes a single job category based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "jobCategoryId",
                        "in": "path",
                        "description": "ID of job category to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "JobCategory"
                ],
                "responses": {
                    "200": {
                        "description": "Job Category deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/job_statuses": {
            "get": {
                "summary": "Fetch all job statuses",
                "description": "Returns all job statuses from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Keywords to limit ( all \\ numbers)",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "JobStatus"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched job statuses",
                        "schema": {
                            "$ref": "#/definitions/JobStatus"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/job_types": {
            "get": {
                "summary": "Fetch all job types",
                "description": "Returns all job types from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter job type",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "JobType"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched job types",
                        "schema": {
                            "$ref": "#/definitions/JobType"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new job type",
                "description": "Creates a new job type",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The job type JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addJobType"
                        }
                    }
                ],
                "tags": [
                    "JobType"
                ],
                "responses": {
                    "200": {
                        "description": "New job type added",
                        "schema": {
                            "$ref": "#/definitions/JobType"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/job_types/{jobTypeId}": {
            "get": {
                "summary": "Fetch job type",
                "description": "Returns a job type based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "jobTypeId",
                        "in": "path",
                        "description": "ID of job type to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "JobType"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched job type",
                        "schema": {
                            "$ref": "#/definitions/JobType"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update job type by its id",
                "description": "Update job type by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "jobTypeId",
                        "in": "path",
                        "description": "ID of job type to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The job type JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addJobType"
                        }
                    }
                ],
                "tags": [
                    "JobType"
                ],
                "responses": {
                    "200": {
                        "description": "Job Type updated",
                        "schema": {
                            "$ref": "#/definitions/JobType"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete job type",
                "description": "Deletes a single job type based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "jobTypeId",
                        "in": "path",
                        "description": "ID of job type to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "JobType"
                ],
                "responses": {
                    "200": {
                        "description": "Job Type deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/resume_ratings": {
            "get": {
                "summary": "Fetch all resume ratings",
                "description": "Returns all resume ratings from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "job_id",
                        "in": "query",
                        "description": "ID of job to  fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "job_apply_id",
                        "in": "query",
                        "description": "ID of job apply to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "ResumeRating"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched resume ratings",
                        "schema": {
                            "$ref": "#/definitions/ResumeRating"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new resume rating",
                "description": "Creates a new resume rating",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The resume rating JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addResumeRating"
                        }
                    }
                ],
                "tags": [
                    "ResumeRating"
                ],
                "responses": {
                    "200": {
                        "description": "New resume rating added",
                        "schema": {
                            "$ref": "#/definitions/ResumeRating"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/resume_ratings/{resumeRatingId}": {
            "get": {
                "summary": "Fetch resume rating",
                "description": "Returns a resume rating based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "resumeRatingId",
                        "in": "path",
                        "description": "ID of resume rating to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "ResumeRating"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched resume rating",
                        "schema": {
                            "$ref": "#/definitions/ResumeRating"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update resume rating by its id",
                "description": "Update resume rating by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "resumeRatingId",
                        "in": "path",
                        "description": "ID of resume rating to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The resume rating JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addResumeRating"
                        }
                    }
                ],
                "tags": [
                    "ResumeRating"
                ],
                "responses": {
                    "200": {
                        "description": "Resume Rating updated",
                        "schema": {
                            "$ref": "#/definitions/ResumeRating"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete resume rating",
                "description": "Deletes a single resume rating based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "resumeRatingId",
                        "in": "path",
                        "description": "ID of resume rating to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "ResumeRating"
                ],
                "responses": {
                    "200": {
                        "description": "Resume Rating deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/job_apply/{jobApplyId}/resume_ratings": {
            "get": {
                "summary": "Fetch all resume ratings",
                "description": "Returns all resume ratings from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "jobApplyId",
                        "in": "path",
                        "description": "ID of job apply to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "ResumeRating"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched resume ratings",
                        "schema": {
                            "$ref": "#/definitions/ResumeRating"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/salary_types": {
            "get": {
                "summary": "Fetch all salary types",
                "description": "Returns all salary types from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter salary type",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "SalaryType"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched salary types",
                        "schema": {
                            "$ref": "#/definitions/SalaryType"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new salary type",
                "description": "Creates a new salary type",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The salary type JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addSalaryType"
                        }
                    }
                ],
                "tags": [
                    "SalaryType"
                ],
                "responses": {
                    "200": {
                        "description": "New salary type added",
                        "schema": {
                            "$ref": "#/definitions/SalaryType"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/salary_types/{salaryTypeId}": {
            "get": {
                "summary": "Fetch salary type",
                "description": "Returns a salary type based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "salaryTypeId",
                        "in": "path",
                        "description": "ID of salary type to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "SalaryType"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched salary type",
                        "schema": {
                            "$ref": "#/definitions/SalaryType"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update salary type by its id",
                "description": "Update salary type by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "salaryTypeId",
                        "in": "path",
                        "description": "ID of salary type to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The salary type JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addSalaryType"
                        }
                    }
                ],
                "tags": [
                    "SalaryType"
                ],
                "responses": {
                    "200": {
                        "description": "Salary Type updated",
                        "schema": {
                            "$ref": "#/definitions/SalaryType"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete salary type",
                "description": "Deletes a single salary type based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "salaryTypeId",
                        "in": "path",
                        "description": "ID of salary type to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "SalaryType"
                ],
                "responses": {
                    "200": {
                        "description": "Salary Type deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/skills": {
            "get": {
                "summary": "Fetch all skills",
                "description": "Returns all skills from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter skill",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit to set or get all record type \"all\"",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Skill"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched skills",
                        "schema": {
                            "$ref": "#/definitions/Skill"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new skill",
                "description": "Creates a new skill",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The skill JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addSkill"
                        }
                    }
                ],
                "tags": [
                    "Skill"
                ],
                "responses": {
                    "200": {
                        "description": "New skill added",
                        "schema": {
                            "$ref": "#/definitions/Skill"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/skills/{skillId}": {
            "get": {
                "summary": "Fetch skill",
                "description": "Returns a skill based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "skillId",
                        "in": "path",
                        "description": "ID of skill to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Skill"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched skill",
                        "schema": {
                            "$ref": "#/definitions/Skill"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update skill by its id",
                "description": "Update skill by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "skillId",
                        "in": "path",
                        "description": "ID of skill to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The skill JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addSkill"
                        }
                    }
                ],
                "tags": [
                    "Skill"
                ],
                "responses": {
                    "200": {
                        "description": "Skill updated",
                        "schema": {
                            "$ref": "#/definitions/Skill"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete skill",
                "description": "Deletes a single skill based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "skillId",
                        "in": "path",
                        "description": "ID of skill to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Skill"
                ],
                "responses": {
                    "200": {
                        "description": "Skill deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/portfolios": {
            "get": {
                "summary": "Fetch all portfolios",
                "description": "Returns all portfolios from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "filter value \"my_followings\"",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit to set or get all record type \"all\"",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "user_id",
                        "in": "query",
                        "description": "ID of user to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "skill",
                        "in": "query",
                        "description": "ID of portfolio skill to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Portfolio"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched portfolios",
                        "schema": {
                            "$ref": "#/definitions/Portfolio"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new portfolio",
                "description": "Creates a new portfolio",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The portfolio JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addPortfolio"
                        }
                    }
                ],
                "tags": [
                    "Portfolio"
                ],
                "responses": {
                    "200": {
                        "description": "New portfolio added",
                        "schema": {
                            "$ref": "#/definitions/Portfolio"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/portfolios/{portfolioId}": {
            "get": {
                "summary": "Fetch portfolio",
                "description": "Returns a portfolio based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "portfolioId",
                        "in": "path",
                        "description": "ID of portfolio to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Type value is \"view\"",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Portfolio"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched portfolio",
                        "schema": {
                            "$ref": "#/definitions/Portfolio"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update portfolio by its id",
                "description": "Update portfolio by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "portfolioId",
                        "in": "path",
                        "description": "ID of portfolio to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The portfolio JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/updatePortfolio"
                        }
                    }
                ],
                "tags": [
                    "Portfolio"
                ],
                "responses": {
                    "200": {
                        "description": "Portfolio updated",
                        "schema": {
                            "$ref": "#/definitions/Portfolio"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete portfolio",
                "description": "Deletes a single portfolio based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "portfolioId",
                        "in": "path",
                        "description": "ID of portfolio to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Portfolio"
                ],
                "responses": {
                    "200": {
                        "description": "Portfolio deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/me/portfolios": {
            "get": {
                "summary": "Fetch all portfolios",
                "description": "Returns all portfolios from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit to set or get all record type \"all\"",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Portfolio"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched portfolios",
                        "schema": {
                            "$ref": "#/definitions/Portfolio"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/quote_bids": {
            "get": {
                "summary": "Fetch all quote bids",
                "description": "Returns all quote bids from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quote_service_id",
                        "in": "query",
                        "description": "To fetch quote service records",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "quote_status_id",
                        "in": "query",
                        "description": "To fetch quote bid service records",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "tags": [
                    "QuoteBid"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched quote bids",
                        "schema": {
                            "$ref": "#/definitions/QuoteBid"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/quote_bids/{quoteBidId}": {
            "get": {
                "summary": "Fetch quote bid",
                "description": "Returns a quote bid based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quoteBidId",
                        "in": "path",
                        "description": "ID of quote bid to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "QuoteBid"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched quote bid",
                        "schema": {
                            "$ref": "#/definitions/QuoteBid"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update quote bid by its id",
                "description": "Update quote bid by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quoteBidId",
                        "in": "path",
                        "description": "ID of quote bid to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The quote bid JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/editQuoteBid"
                        }
                    }
                ],
                "tags": [
                    "QuoteBid"
                ],
                "responses": {
                    "200": {
                        "description": "Quote Bid updated",
                        "schema": {
                            "$ref": "#/definitions/QuoteBid"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete quote bid",
                "description": "Deletes a single quote bid based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quoteBidId",
                        "in": "path",
                        "description": "ID of quote bid to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "QuoteBid"
                ],
                "responses": {
                    "200": {
                        "description": "Quote Bid deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/requestor/{requestorId}/quote_bids": {
            "get": {
                "summary": "Fetch all quote bids of a particular request",
                "description": "Returns all quote bids from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "requestorId",
                        "in": "path",
                        "description": "ID of Request",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "quote_bid_status_id",
                        "in": "query",
                        "description": "ID of quote Bid Status",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "quote_request_id",
                        "in": "query",
                        "description": "ID of quote Request",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "is_request_for_buy",
                        "in": "query",
                        "description": "Quote Request for Buy (0 / 1)",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "QuoteBid"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched quote bids",
                        "schema": {
                            "$ref": "#/definitions/QuoteBid"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/service_providers/{serviceProviderUserId}/quote_bids": {
            "get": {
                "summary": "Fetch all quote bids for  particular service provider",
                "description": "Returns all quote bids from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "serviceProviderUserId",
                        "in": "path",
                        "description": "ID of service provider user",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "quote_bid_status_id",
                        "in": "query",
                        "description": "ID separate with commas",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "is_request_for_buy",
                        "in": "query",
                        "description": "Quote Request for Buy (0 / 1)",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quote_service_id",
                        "in": "query",
                        "description": "To fetch quote service records",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "tags": [
                    "QuoteBid"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched quote bids",
                        "schema": {
                            "$ref": "#/definitions/QuoteBid"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/quote_categories": {
            "get": {
                "summary": "Fetch all quote categories",
                "description": "Returns all quote categories from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "all/active/inactive",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "display_type",
                        "in": "query",
                        "description": "child/parent/hierarchical",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Keywords to limit ( all \\ numbers)",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "parent_category_id",
                        "in": "query",
                        "description": "ID of parent category to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "is_featured",
                        "in": "query",
                        "description": "To fetch is_featured records",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "tags": [
                    "QuoteCategory"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched quote categories",
                        "schema": {
                            "$ref": "#/definitions/QuoteCategory"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new quote category",
                "description": "Creates a new quote category",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The quote category JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addQuoteCategory"
                        }
                    }
                ],
                "tags": [
                    "QuoteCategory"
                ],
                "responses": {
                    "200": {
                        "description": "New quote category added",
                        "schema": {
                            "$ref": "#/definitions/QuoteCategory"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/quote_categories/{quoteCategoryId}": {
            "get": {
                "summary": "Fetch quote category",
                "description": "Returns a quote category based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quoteCategoryId",
                        "in": "path",
                        "description": "ID of quote category to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "QuoteCategory"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched quote category",
                        "schema": {
                            "$ref": "#/definitions/QuoteCategory"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update quote category by its id",
                "description": "Update quote category by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quoteCategoryId",
                        "in": "path",
                        "description": "ID of quote category to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The quote category JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addQuoteCategory"
                        }
                    }
                ],
                "tags": [
                    "QuoteCategory"
                ],
                "responses": {
                    "200": {
                        "description": "Quote Category updated",
                        "schema": {
                            "$ref": "#/definitions/QuoteCategory"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete quote category",
                "description": "Deletes a single quote category based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quoteCategoryId",
                        "in": "path",
                        "description": "ID of quote category to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "QuoteCategory"
                ],
                "responses": {
                    "200": {
                        "description": "Quote Category deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/quote_categories_quote_services": {
            "get": {
                "summary": "Fetch all quote categories quote services",
                "description": "Returns all quote categories quote services from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "display_type",
                        "in": "query",
                        "description": "display_type = child",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quote_category_id",
                        "in": "query",
                        "description": "ID of quote category to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quote_service_id",
                        "in": "query",
                        "description": "To fetch quote service records",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "tags": [
                    "QuoteCategoriesQuoteService"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched quote categories quote services",
                        "schema": {
                            "$ref": "#/definitions/QuoteCategoriesQuoteService"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/credit_purchase_logs": {
            "get": {
                "summary": "Fetch all quote credit purchase logs",
                "description": "Returns all quote credit purchase logs from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "user_id",
                        "in": "query",
                        "description": "ID of user to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "credit_purchase_plan_id",
                        "in": "query",
                        "description": "ID of quote credit purchase plan to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "CreditPurchaseLog"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched quote credit purchase logs",
                        "schema": {
                            "$ref": "#/definitions/CreditPurchaseLog"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new quote credit purchase log",
                "description": "Creates a new quote credit purchase log",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The quote credit purchase log JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addCreditPurchaseLog"
                        }
                    }
                ],
                "tags": [
                    "CreditPurchaseLog"
                ],
                "responses": {
                    "200": {
                        "description": "New quote credit purchase log added",
                        "schema": {
                            "$ref": "#/definitions/CreditPurchaseLog"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/credit_purchase_logs/{creditPurchaseLogId}": {
            "get": {
                "summary": "Fetch quote credit purchase log",
                "description": "Returns a quote credit purchase log based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "creditPurchaseLogId",
                        "in": "path",
                        "description": "ID of quote credit purchase log to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "CreditPurchaseLog"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched quote credit purchase log",
                        "schema": {
                            "$ref": "#/definitions/CreditPurchaseLog"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Fetch quote credit purchase log",
                "description": "Returns a quote credit purchase log based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "creditPurchaseLogId",
                        "in": "path",
                        "description": "ID of quote credit purchase log to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The quote credit purchase log JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/updateCreditPurchaseLog"
                        }
                    }
                ],
                "tags": [
                    "CreditPurchaseLog"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched quote credit purchase log",
                        "schema": {
                            "$ref": "#/definitions/CreditPurchaseLog"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete quote credit purchase log",
                "description": "Deletes a single quote credit purchase log based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "creditPurchaseLogId",
                        "in": "path",
                        "description": "ID of quote credit purchase log to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "CreditPurchaseLog"
                ],
                "responses": {
                    "200": {
                        "description": "Quote Credit Purchase Log deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/me/credit_purchase_logs": {
            "get": {
                "summary": "Fetch all quote credit purchase logs based on User",
                "description": "Returns all quote credit purchase logs from the system based on User",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "(all / active / inactive)",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "CreditPurchaseLog"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched quote services",
                        "schema": {
                            "$ref": "#/definitions/CreditPurchaseLog"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/credit_purchase_plans": {
            "get": {
                "summary": "Fetch all quote credit purchase plans",
                "description": "Returns all quote credit purchase plans from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "all/active/inactive",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "CreditPurchasePlan"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched quote credit purchase plans",
                        "schema": {
                            "$ref": "#/definitions/CreditPurchasePlan"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new quote credit purchase plan",
                "description": "Creates a new quote credit purchase plan",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The quote credit purchase plan JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addCreditPurchasePlan"
                        }
                    }
                ],
                "tags": [
                    "CreditPurchasePlan"
                ],
                "responses": {
                    "200": {
                        "description": "New quote credit purchase plan added",
                        "schema": {
                            "$ref": "#/definitions/CreditPurchasePlan"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/credit_purchase_plans/{creditPurchasePlanId}": {
            "get": {
                "summary": "Fetch quote credit purchase plan",
                "description": "Returns a quote credit purchase plan based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "creditPurchasePlanId",
                        "in": "path",
                        "description": "ID of quote credit purchase plan to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "CreditPurchasePlan"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched quote credit purchase plan",
                        "schema": {
                            "$ref": "#/definitions/CreditPurchasePlan"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update quote credit purchase plan by its id",
                "description": "Update quote credit purchase plan by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "creditPurchasePlanId",
                        "in": "path",
                        "description": "ID of quote credit purchase plan to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The quote credit purchase plan JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addCreditPurchasePlan"
                        }
                    }
                ],
                "tags": [
                    "CreditPurchasePlan"
                ],
                "responses": {
                    "200": {
                        "description": "Quote Credit Purchase Plan updated",
                        "schema": {
                            "$ref": "#/definitions/CreditPurchasePlan"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete quote credit purchase plan",
                "description": "Deletes a single quote credit purchase plan based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "creditPurchasePlanId",
                        "in": "path",
                        "description": "ID of quote credit purchase plan to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "CreditPurchasePlan"
                ],
                "responses": {
                    "200": {
                        "description": "Quote Credit Purchase Plan deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/quote_faq_answers": {
            "get": {
                "summary": "Fetch all quote faq answers",
                "description": "Returns all quote faq answers from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quote_service_id",
                        "in": "query",
                        "description": "To fetch quote service records",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "tags": [
                    "QuoteFaqAnswer"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched quote faq answers",
                        "schema": {
                            "$ref": "#/definitions/QuoteFaqAnswer"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new quote faq answer",
                "description": "Creates a new quote faq answer",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Post QuoteFaqQuestion /  QuoteFaqQuestionId",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addQuoteFaqAnswer"
                        }
                    }
                ],
                "tags": [
                    "QuoteFaqAnswer"
                ],
                "responses": {
                    "200": {
                        "description": "New quote faq answer added",
                        "schema": {
                            "$ref": "#/definitions/QuoteFaqAnswer"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/quote_faq_answers/{quoteFaqAnswerId}": {
            "get": {
                "summary": "Fetch quote faq answer",
                "description": "Returns a quote faq answer based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quoteFaqAnswerId",
                        "in": "path",
                        "description": "ID of quote faq answer to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "QuoteFaqAnswer"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched quote faq answer",
                        "schema": {
                            "$ref": "#/definitions/QuoteFaqAnswer"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update quote faq answer by its id",
                "description": "Update quote faq answer by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quoteFaqAnswerId",
                        "in": "path",
                        "description": "ID of quote faq answer to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The quote faq answer JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addQuoteFaqAnswer"
                        }
                    }
                ],
                "tags": [
                    "QuoteFaqAnswer"
                ],
                "responses": {
                    "200": {
                        "description": "Quote Faq Answer updated",
                        "schema": {
                            "$ref": "#/definitions/QuoteFaqAnswer"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete quote faq answer",
                "description": "Deletes a single quote faq answer based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quoteFaqAnswerId",
                        "in": "path",
                        "description": "ID of quote faq answer to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "QuoteFaqAnswer"
                ],
                "responses": {
                    "200": {
                        "description": "Quote Faq Answer deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/quote_services/{quoteServiceId}/quote_faq_answers": {
            "get": {
                "summary": "Fetch all quote faq answers",
                "description": "Returns all quote faq answers from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quoteServiceId",
                        "in": "path",
                        "description": "ID of Service",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "QuoteFaqAnswer"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched quote faq answers",
                        "schema": {
                            "$ref": "#/definitions/QuoteFaqAnswer"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/quote_faq_question_templates": {
            "get": {
                "summary": "Fetch all quote faq question templates",
                "description": "Returns all quote faq question templates from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter quote faq question template",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "QuoteFaqQuestionTemplate"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched quote faq question templates",
                        "schema": {
                            "$ref": "#/definitions/QuoteFaqQuestionTemplate"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new quote faq question template",
                "description": "Creates a new quote faq question template",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The quote faq question template JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addQuoteFaqQuestionTemplate"
                        }
                    }
                ],
                "tags": [
                    "QuoteFaqQuestionTemplate"
                ],
                "responses": {
                    "200": {
                        "description": "New quote faq question template added",
                        "schema": {
                            "$ref": "#/definitions/QuoteFaqQuestionTemplate"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/quote_faq_question_templates/{quoteFaqQuestionTemplateId}": {
            "get": {
                "summary": "Fetch quote faq question template",
                "description": "Returns a quote faq question template based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quoteFaqQuestionTemplateId",
                        "in": "path",
                        "description": "ID of quote faq question template to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "QuoteFaqQuestionTemplate"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched quote faq question template",
                        "schema": {
                            "$ref": "#/definitions/QuoteFaqQuestionTemplate"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update quote faq question template by its id",
                "description": "Update quote faq question template by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quoteFaqQuestionTemplateId",
                        "in": "path",
                        "description": "ID of quote faq question template to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The quote faq question template JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addQuoteFaqQuestionTemplate"
                        }
                    }
                ],
                "tags": [
                    "QuoteFaqQuestionTemplate"
                ],
                "responses": {
                    "200": {
                        "description": "Quote Faq Question Template updated",
                        "schema": {
                            "$ref": "#/definitions/QuoteFaqQuestionTemplate"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete quote faq question template",
                "description": "Deletes a single quote faq question template based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quoteFaqQuestionTemplateId",
                        "in": "path",
                        "description": "ID of quote faq question template to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "QuoteFaqQuestionTemplate"
                ],
                "responses": {
                    "200": {
                        "description": "Quote Faq Question Template deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/quote_request_form_fields": {
            "get": {
                "summary": "Fetch all quote request form fields",
                "description": "Returns all quote request form fields from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "QuoteRequestFormField"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched quote request form fields",
                        "schema": {
                            "$ref": "#/definitions/QuoteRequestFormField"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/quote_request_form_fields/{quoteRequestFormFieldId}": {
            "get": {
                "summary": "Fetch quote request form field",
                "description": "Returns a quote request form field based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quoteRequestFormFieldId",
                        "in": "path",
                        "description": "ID of quote request form field to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "QuoteRequestFormField"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched quote request form field",
                        "schema": {
                            "$ref": "#/definitions/QuoteRequestFormField"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update quote request form field by its id",
                "description": "Update quote request form field by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quoteRequestFormFieldId",
                        "in": "path",
                        "description": "ID of quote request form field to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The quote request form field JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addQuoteRequestFormField"
                        }
                    }
                ],
                "tags": [
                    "QuoteRequestFormField"
                ],
                "responses": {
                    "200": {
                        "description": "Quote Request Form Field updated",
                        "schema": {
                            "$ref": "#/definitions/QuoteRequestFormField"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete quote request form field",
                "description": "Deletes a single quote request form field based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quoteRequestFormFieldId",
                        "in": "path",
                        "description": "ID of quote request form field to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "QuoteRequestFormField"
                ],
                "responses": {
                    "200": {
                        "description": "Quote Request Form Field deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/quote_requests/{quoteRequestId}/quote_request_form_fields": {
            "get": {
                "summary": "Fetch all quote request form fields of a bid",
                "description": "Returns all quote request form fields from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quoteRequestId",
                        "in": "path",
                        "description": "from quote Request Id",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "QuoteRequestFormField"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched quote request form fields",
                        "schema": {
                            "$ref": "#/definitions/QuoteRequestFormField"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/quote_requests": {
            "get": {
                "summary": "Fetch all quote requests",
                "description": "Returns all quote requests from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "user_id",
                        "in": "query",
                        "description": "ID of user to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "is_request_for_buy",
                        "in": "query",
                        "description": "value must be true/false",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "QuoteRequest"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched quote requests",
                        "schema": {
                            "$ref": "#/definitions/QuoteRequest"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new quote request",
                "description": "Creates a new quote request",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "radius",
                        "in": "query",
                        "description": "Radius to cover the services",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The quote request JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addQuoteRequest"
                        }
                    }
                ],
                "tags": [
                    "QuoteRequest"
                ],
                "responses": {
                    "200": {
                        "description": "New quote request added",
                        "schema": {
                            "$ref": "#/definitions/QuoteRequest"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/quote_requests/{quoteRequestId}": {
            "get": {
                "summary": "Fetch quote request",
                "description": "Returns a quote request based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quoteRequestId",
                        "in": "path",
                        "description": "ID of quote request to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "QuoteRequest"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched quote request",
                        "schema": {
                            "$ref": "#/definitions/QuoteRequest"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update quote request by its id",
                "description": "Update quote request by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quoteRequestId",
                        "in": "path",
                        "description": "ID of quote request to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The quote request JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addQuoteRequest"
                        }
                    }
                ],
                "tags": [
                    "QuoteRequest"
                ],
                "responses": {
                    "200": {
                        "description": "Quote Request updated",
                        "schema": {
                            "$ref": "#/definitions/QuoteRequest"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete quote request",
                "description": "Deletes a single quote request based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quoteRequestId",
                        "in": "path",
                        "description": "ID of quote request to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "QuoteRequest"
                ],
                "responses": {
                    "200": {
                        "description": "Quote Request deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/me/quote_requests": {
            "get": {
                "summary": "Fetch all quote requests",
                "description": "Returns all quote requests from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "is_archived",
                        "in": "query",
                        "description": "value must be true/false",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "QuoteRequest"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched quote requests",
                        "schema": {
                            "$ref": "#/definitions/QuoteRequest"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/quote_requests/me/stats": {
            "get": {
                "summary": "Fetch all quote requests",
                "description": "Returns all quote requests from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "QuoteRequest"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched quote requests",
                        "schema": {
                            "$ref": "#/definitions/QuoteRequest"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/quote_service_audios": {
            "get": {
                "summary": "Fetch all quote service audios",
                "description": "Returns all quote service audios from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quote_service_id",
                        "in": "query",
                        "description": "To fetch quote service records",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "tags": [
                    "QuoteServiceAudio"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched quote service audios",
                        "schema": {
                            "$ref": "#/definitions/QuoteServiceAudio"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new quote service audio",
                "description": "Creates a new quote service audio",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The quote service audio JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addQuoteServiceAudio"
                        }
                    }
                ],
                "tags": [
                    "QuoteServiceAudio"
                ],
                "responses": {
                    "200": {
                        "description": "New quote service audio added",
                        "schema": {
                            "$ref": "#/definitions/QuoteServiceAudio"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/quote_service_audios/{quoteServiceAudioId}": {
            "get": {
                "summary": "Fetch quote service audio",
                "description": "Returns a quote service audio based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quoteServiceAudioId",
                        "in": "path",
                        "description": "ID of quote service audio to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "QuoteServiceAudio"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched quote service audio",
                        "schema": {
                            "$ref": "#/definitions/QuoteServiceAudio"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update quote service audio by its id",
                "description": "Update quote service audio by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quoteServiceAudioId",
                        "in": "path",
                        "description": "ID of quote service audio to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The quote service audio JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addQuoteServiceAudio"
                        }
                    }
                ],
                "tags": [
                    "QuoteServiceAudio"
                ],
                "responses": {
                    "200": {
                        "description": "Quote Service Audio updated",
                        "schema": {
                            "$ref": "#/definitions/QuoteServiceAudio"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete quote service audio",
                "description": "Deletes a single quote service audio based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quoteServiceAudioId",
                        "in": "path",
                        "description": "ID of quote service audio to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "QuoteServiceAudio"
                ],
                "responses": {
                    "200": {
                        "description": "Quote Service Audio deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/quote_services/{quoteServiceId}/quote_service_audios": {
            "get": {
                "summary": "Fetch all quote service audios of particular Service",
                "description": "Returns all quote service audios from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quoteServiceId",
                        "in": "path",
                        "description": "from quote Service Id",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "QuoteServiceAudio"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched quote service audios",
                        "schema": {
                            "$ref": "#/definitions/QuoteServiceAudio"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/quote_service_photos": {
            "get": {
                "summary": "Fetch all quote service photos",
                "description": "Returns all quote service photos from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quote_service_id",
                        "in": "query",
                        "description": "To fetch quote service records",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "tags": [
                    "QuoteServicePhoto"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched quote service photos",
                        "schema": {
                            "$ref": "#/definitions/QuoteServicePhoto"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new quote service photo",
                "description": "Creates a new quote service photo",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The quote service photo JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addQuoteServicePhoto"
                        }
                    }
                ],
                "tags": [
                    "QuoteServicePhoto"
                ],
                "responses": {
                    "200": {
                        "description": "New quote service photo added",
                        "schema": {
                            "$ref": "#/definitions/QuoteServicePhoto"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/quote_service_photos/{quoteServicePhotoId}": {
            "get": {
                "summary": "Fetch quote service photo",
                "description": "Returns a quote service photo based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quoteServicePhotoId",
                        "in": "path",
                        "description": "ID of quote service photo to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "QuoteServicePhoto"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched quote service photo",
                        "schema": {
                            "$ref": "#/definitions/QuoteServicePhoto"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update quote service photo by its id",
                "description": "Update quote service photo by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quoteServicePhotoId",
                        "in": "path",
                        "description": "ID of quote service photo to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The quote service photo JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addQuoteServicePhoto"
                        }
                    }
                ],
                "tags": [
                    "QuoteServicePhoto"
                ],
                "responses": {
                    "200": {
                        "description": "Quote Service Photo updated",
                        "schema": {
                            "$ref": "#/definitions/QuoteServicePhoto"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete quote service photo",
                "description": "Deletes a single quote service photo based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quoteServicePhotoId",
                        "in": "path",
                        "description": "ID of quote service photo to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "QuoteServicePhoto"
                ],
                "responses": {
                    "200": {
                        "description": "Quote Service Photo deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/quote_services/{quoteServiceId}/quote_service_photos": {
            "get": {
                "summary": "Fetch all quote service photos",
                "description": "Returns all quote service photos from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quoteServiceId",
                        "in": "path",
                        "description": "from quote Service Id",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "QuoteServicePhoto"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched quote service photos",
                        "schema": {
                            "$ref": "#/definitions/QuoteServicePhoto"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/ips": {
            "get": {
                "summary": "Fetch all ips",
                "description": "Returns all ips from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter ips",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Ips"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched ips",
                        "schema": {
                            "$ref": "#/definitions/Ips"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/ips/{ipId}": {
            "get": {
                "summary": "Fetch ip",
                "description": "Returns a ip based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "ipId",
                        "in": "path",
                        "description": "ID of ip to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Ips"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched question",
                        "schema": {
                            "$ref": "#/definitions/Ips"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete ips",
                "description": "Deletes a single ip based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "ipId",
                        "in": "path",
                        "description": "ID of ips to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Ips"
                ],
                "responses": {
                    "200": {
                        "description": "IP deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/quote_services": {
            "get": {
                "summary": "Fetch all quote services",
                "description": "Returns all quote services from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "latitude",
                        "in": "query",
                        "description": "latitude",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "longitude",
                        "in": "query",
                        "description": "longitude",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "radius",
                        "in": "query",
                        "description": "Radius to cover the services",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter quote service",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "categories",
                        "in": "query",
                        "description": "categories filter",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "user_id",
                        "in": "query",
                        "description": "ID of user to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "is_admin_suspend",
                        "in": "query",
                        "description": "is_admin_suspend to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "QuoteService"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched quote services",
                        "schema": {
                            "$ref": "#/definitions/QuoteService"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new quote service",
                "description": "Creates a new quote service",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The quote service JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addQuoteService"
                        }
                    }
                ],
                "tags": [
                    "QuoteService"
                ],
                "responses": {
                    "200": {
                        "description": "New quote service added",
                        "schema": {
                            "$ref": "#/definitions/QuoteService"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/quote_services/{quoteServiceId}": {
            "get": {
                "summary": "Fetch quote service",
                "description": "Returns a quote service based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quoteServiceId",
                        "in": "path",
                        "description": "ID of quote service to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Type value is \"view\"",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "QuoteService"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched quote service",
                        "schema": {
                            "$ref": "#/definitions/QuoteService"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update quote service by its id",
                "description": "Update quote service by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quoteServiceId",
                        "in": "path",
                        "description": "ID of quote service to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The quote service JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addQuoteService"
                        }
                    }
                ],
                "tags": [
                    "QuoteService"
                ],
                "responses": {
                    "200": {
                        "description": "Quote Service updated",
                        "schema": {
                            "$ref": "#/definitions/QuoteService"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete quote service",
                "description": "Deletes a single quote service based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quoteServiceId",
                        "in": "path",
                        "description": "ID of quote service to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "QuoteService"
                ],
                "responses": {
                    "200": {
                        "description": "Quote Service deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/users/{userId}/quote_services": {
            "get": {
                "summary": "Fetch all quote services based on User",
                "description": "Returns all quote services from the system based on User",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "ID of User",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "latitude",
                        "in": "query",
                        "description": "latitude",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "longitude",
                        "in": "query",
                        "description": "longitude",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "radius",
                        "in": "query",
                        "description": "Radius to cover the services",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "QuoteService"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched quote services",
                        "schema": {
                            "$ref": "#/definitions/QuoteService"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/quote_services/me/service_stats": {
            "get": {
                "summary": "Fetch all quote services based on User",
                "description": "Returns all quote services from the system based on User",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "QuoteService"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched quote services",
                        "schema": {
                            "$ref": "#/definitions/QuoteService"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/me/quote_services": {
            "get": {
                "summary": "Fetch all quote services",
                "description": "Returns all quote services from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "latitude",
                        "in": "query",
                        "description": "latitude",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "longitude",
                        "in": "query",
                        "description": "longitude",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "radius",
                        "in": "query",
                        "description": "Radius to cover the services",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "all / active / inactive",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "categories",
                        "in": "query",
                        "description": "categories filter",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "QuoteService"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched quote services",
                        "schema": {
                            "$ref": "#/definitions/QuoteService"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/quote_service_videos": {
            "get": {
                "summary": "Fetch all quote service videos",
                "description": "Returns all quote service videos from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quote_service_id",
                        "in": "query",
                        "description": "To fetch quote service records",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "tags": [
                    "QuoteServiceVideo"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched quote service videos",
                        "schema": {
                            "$ref": "#/definitions/QuoteServiceVideo"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new quote service video",
                "description": "Creates a new quote service video",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The quote service video JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addQuoteServiceVideo"
                        }
                    }
                ],
                "tags": [
                    "QuoteServiceVideo"
                ],
                "responses": {
                    "200": {
                        "description": "New quote service video added",
                        "schema": {
                            "$ref": "#/definitions/QuoteServiceVideo"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/quote_service_videos/{quoteServiceVideoId}": {
            "get": {
                "summary": "Fetch quote service video",
                "description": "Returns a quote service video based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quoteServiceVideoId",
                        "in": "path",
                        "description": "ID of quote service video to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "QuoteServiceVideo"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched quote service video",
                        "schema": {
                            "$ref": "#/definitions/QuoteServiceVideo"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update quote service video by its id",
                "description": "Update quote service video by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quoteServiceVideoId",
                        "in": "path",
                        "description": "ID of quote service video to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The quote service video JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addQuoteServiceVideo"
                        }
                    }
                ],
                "tags": [
                    "QuoteServiceVideo"
                ],
                "responses": {
                    "200": {
                        "description": "Quote Service Video updated",
                        "schema": {
                            "$ref": "#/definitions/QuoteServiceVideo"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete quote service video",
                "description": "Deletes a single quote service video based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quoteServiceVideoId",
                        "in": "path",
                        "description": "ID of quote service video to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "QuoteServiceVideo"
                ],
                "responses": {
                    "200": {
                        "description": "Quote Service Video deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/quote_services/{quoteServiceId}/quote_service_videos": {
            "get": {
                "summary": "Fetch all quote service videos",
                "description": "Returns all quote service videos from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quoteServiceId",
                        "in": "path",
                        "description": "from quote Service Id",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "QuoteServiceVideo"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched quote service videos",
                        "schema": {
                            "$ref": "#/definitions/QuoteServiceVideo"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/quote_statuses": {
            "get": {
                "summary": "Fetch all quote statuses",
                "description": "Returns all quote statuses from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "QuoteStatus"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched quote statuses",
                        "schema": {
                            "$ref": "#/definitions/QuoteStatus"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/quote_user_faq_questions": {
            "get": {
                "summary": "Fetch all quote user faq questions",
                "description": "Returns all quote user faq questions from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "QuoteUserFaqQuestion"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched quote user faq questions",
                        "schema": {
                            "$ref": "#/definitions/QuoteUserFaqQuestion"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/quote_user_faq_questions/{quoteUserFaqQuestionId}": {
            "get": {
                "summary": "Fetch quote user faq question",
                "description": "Returns a quote user faq question based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quoteUserFaqQuestionId",
                        "in": "path",
                        "description": "ID of quote user faq question to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "QuoteUserFaqQuestion"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched quote user faq question",
                        "schema": {
                            "$ref": "#/definitions/QuoteUserFaqQuestion"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update quote user faq question by its id",
                "description": "Update quote user faq question by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quoteUserFaqQuestionId",
                        "in": "path",
                        "description": "ID of quote user faq question to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The quote user faq question JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addQuoteUserFaqQuestion"
                        }
                    }
                ],
                "tags": [
                    "QuoteUserFaqQuestion"
                ],
                "responses": {
                    "200": {
                        "description": "Quote User Faq Question updated",
                        "schema": {
                            "$ref": "#/definitions/QuoteUserFaqQuestion"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete quote user faq question",
                "description": "Deletes a single quote user faq question based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "quoteUserFaqQuestionId",
                        "in": "path",
                        "description": "ID of quote user faq question to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "QuoteUserFaqQuestion"
                ],
                "responses": {
                    "200": {
                        "description": "Quote User Faq Question deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/coupons": {
            "get": {
                "summary": "Fetch all coupons",
                "description": "Returns all coupons from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter coupon",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Coupon"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched coupons",
                        "schema": {
                            "$ref": "#/definitions/Coupon"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new coupon",
                "description": "Creates a new coupon",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The coupon JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addCoupon"
                        }
                    }
                ],
                "tags": [
                    "Coupon"
                ],
                "responses": {
                    "200": {
                        "description": "New coupon added",
                        "schema": {
                            "$ref": "#/definitions/Coupon"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/coupons/{couponId}": {
            "get": {
                "summary": "Fetch coupon",
                "description": "Returns a coupon based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "couponId",
                        "in": "path",
                        "description": "ID of coupon to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Coupon"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched coupon",
                        "schema": {
                            "$ref": "#/definitions/Coupon"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update coupon by its id",
                "description": "Update coupon by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "couponId",
                        "in": "path",
                        "description": "ID of coupon to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The coupon JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addCoupon"
                        }
                    }
                ],
                "tags": [
                    "Coupon"
                ],
                "responses": {
                    "200": {
                        "description": "Coupon updated",
                        "schema": {
                            "$ref": "#/definitions/Coupon"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete coupon",
                "description": "Deletes a single coupon based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "couponId",
                        "in": "path",
                        "description": "ID of coupon to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Coupon"
                ],
                "responses": {
                    "200": {
                        "description": "Coupon deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/coupons/get_status/{coupon_code}": {
            "get": {
                "summary": "Fetch coupon",
                "description": "Returns a coupon based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "coupon_code",
                        "in": "path",
                        "description": "Id of coupon code to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "amount",
                        "in": "query",
                        "description": "Amount to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Coupon"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched coupon",
                        "schema": {
                            "$ref": "#/definitions/Coupon"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/discount_types": {
            "get": {
                "summary": "Fetch all discount types",
                "description": "Returns all discount types from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "DiscountType"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched discount types",
                        "schema": {
                            "$ref": "#/definitions/DiscountType"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/hire_requests": {
            "get": {
                "summary": "Fetch all hire requests",
                "description": "Returns all hire requests from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "HireRequest"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched hire requests",
                        "schema": {
                            "$ref": "#/definitions/HireRequest"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new hire request",
                "description": "Creates a new hire request",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The hire request JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addHireRequest"
                        }
                    }
                ],
                "tags": [
                    "HireRequest"
                ],
                "responses": {
                    "200": {
                        "description": "New hire request added",
                        "schema": {
                            "$ref": "#/definitions/HireRequest"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/hire_requests/{hireRequestId}": {
            "get": {
                "summary": "Fetch hire request",
                "description": "Returns a hire request based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "hireRequestId",
                        "in": "path",
                        "description": "ID of hire request to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "HireRequest"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched hire request",
                        "schema": {
                            "$ref": "#/definitions/HireRequest"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update hire request by its id",
                "description": "Update hire request by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "hireRequestId",
                        "in": "path",
                        "description": "ID of hire request to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The hire request JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addHireRequest"
                        }
                    }
                ],
                "tags": [
                    "HireRequest"
                ],
                "responses": {
                    "200": {
                        "description": "Hire Request updated",
                        "schema": {
                            "$ref": "#/definitions/HireRequest"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete hire request",
                "description": "Deletes a single hire request based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "hireRequestId",
                        "in": "path",
                        "description": "ID of hire request to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "HireRequest"
                ],
                "responses": {
                    "200": {
                        "description": "Hire Request deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/flags": {
            "get": {
                "summary": "Fetch all flags",
                "description": "Returns all flags from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "(portfolio / job / user / project)",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "class",
                        "in": "query",
                        "description": "Class name ( User / Portfolio /  Contest / Project / QuoteService / Job / Exam).",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "foreign_id",
                        "in": "query",
                        "description": "Id of foreign to fetch.",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Flag"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched flags",
                        "schema": {
                            "$ref": "#/definitions/Flag"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new flag",
                "description": "Creates a new flag",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The flag JSON you want to post class value will be (User / Contest / ContestUser / Project / QuoteService / Job / Portfolio )",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addFlags"
                        }
                    }
                ],
                "tags": [
                    "Flag"
                ],
                "responses": {
                    "200": {
                        "description": "New flag added",
                        "schema": {
                            "$ref": "#/definitions/Flag"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/flags/{flagId}": {
            "get": {
                "summary": "Fetch flag",
                "description": "Returns a flag based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "flagId",
                        "in": "path",
                        "description": "ID of flag to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Flag"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched flag",
                        "schema": {
                            "$ref": "#/definitions/Flag"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete flag",
                "description": "Deletes a single flag based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "flagId",
                        "in": "path",
                        "description": "ID of flag to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Flag"
                ],
                "responses": {
                    "200": {
                        "description": "Flag deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/flag_categories": {
            "get": {
                "summary": "Fetch all flag categories",
                "description": "Returns all flag categories from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter flag category",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "class",
                        "in": "query",
                        "description": "Class name ( User / Portfolio /  Contest / Project / QuoteService / Job / Exam ).",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "foreign_id",
                        "in": "query",
                        "description": "Id of foreign to fetch.",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "FlagCategory"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched flag categories",
                        "schema": {
                            "$ref": "#/definitions/FlagCategory"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new flag category",
                "description": "Creates a new flag category",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The flag category JSON you want to post and class value will be (User / Contest / ContestUser / Project / QuoteService / Job / Portfolio )",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addFlagCategory"
                        }
                    }
                ],
                "tags": [
                    "FlagCategory"
                ],
                "responses": {
                    "200": {
                        "description": "New flag category added",
                        "schema": {
                            "$ref": "#/definitions/FlagCategory"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/flag_categories/{flagCategoryId}": {
            "get": {
                "summary": "Fetch flag category",
                "description": "Returns a flag category based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "flagCategoryId",
                        "in": "path",
                        "description": "ID of flag category to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "FlagCategory"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched flag category",
                        "schema": {
                            "$ref": "#/definitions/FlagCategory"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update flag category by its id",
                "description": "Update flag category by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "flagCategoryId",
                        "in": "path",
                        "description": "ID of flag category to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The flag category JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addFlagCategory"
                        }
                    }
                ],
                "tags": [
                    "FlagCategory"
                ],
                "responses": {
                    "200": {
                        "description": "Flag Category updated",
                        "schema": {
                            "$ref": "#/definitions/FlagCategory"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete flag category",
                "description": "Deletes a single flag category based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "flagCategoryId",
                        "in": "path",
                        "description": "ID of flag category to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "FlagCategory"
                ],
                "responses": {
                    "200": {
                        "description": "Flag Category deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/followers": {
            "get": {
                "summary": "Fetch all followers",
                "description": "Returns all followers from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "class",
                        "in": "query",
                        "description": "Class name ( User / Portfolio /  Contest / Project / QuoteService / Job / Exam ).",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "foreign_id",
                        "in": "query",
                        "description": "Id of foreign to fetch.",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Follower"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched followers",
                        "schema": {
                            "$ref": "#/definitions/Follower"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new follower",
                "description": "Creates a new follower",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The follower JSON you want to post class value will be ( User / Contest )",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addFollower"
                        }
                    }
                ],
                "tags": [
                    "Follower"
                ],
                "responses": {
                    "200": {
                        "description": "New follower added",
                        "schema": {
                            "$ref": "#/definitions/Follower"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/followers/{followerId}": {
            "get": {
                "summary": "Fetch follower",
                "description": "Returns a follower based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "followerId",
                        "in": "path",
                        "description": "ID of follower to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Follower"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched follower",
                        "schema": {
                            "$ref": "#/definitions/Follower"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete follower",
                "description": "Deletes a single follower based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "followerId",
                        "in": "path",
                        "description": "ID of follower to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Follower"
                ],
                "responses": {
                    "200": {
                        "description": "Follower deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/messages": {
            "get": {
                "summary": "Fetch all messages",
                "description": "Returns all messages from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "class",
                        "in": "query",
                        "description": "Class name ( User / Portfolio /  Contest / ContestUser / Project / QuoteService / Job / Exam / Bid).",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "foreign_id",
                        "in": "query",
                        "description": "Id of foreign to fetch.",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "model_id",
                        "in": "query",
                        "description": "Id of model to fetch.",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "(inbox/sent/notification)",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "tags": [
                    "Message"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched messages",
                        "schema": {
                            "$ref": "#/definitions/Message"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new message",
                "description": "Creates a new message",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The message JSON you want to post class value will be ( Contest / ContestUser / Project / Bid / QuoteBid )",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addMessage"
                        }
                    }
                ],
                "tags": [
                    "Message"
                ],
                "responses": {
                    "200": {
                        "description": "New message added",
                        "schema": {
                            "$ref": "#/definitions/Message"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/messages/{messageId}": {
            "get": {
                "summary": "Fetch message",
                "description": "Returns a message based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "messageId",
                        "in": "path",
                        "description": "ID of message to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Message"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched message",
                        "schema": {
                            "$ref": "#/definitions/Message"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/form_fields": {
            "get": {
                "summary": "Fetch all  form fields",
                "description": "Returns all  form fields from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter form field",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "class",
                        "in": "query",
                        "description": "Class name (ContestUser / QuoteService / QuoteBid / Contest / Project)",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "foreign_id",
                        "in": "query",
                        "description": "Id of foreign to fetch.",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }                    
                ],
                "tags": [
                    "FormField"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched  form fields",
                        "schema": {
                            "$ref": "#/definitions/FormField"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new  form field",
                "description": "Creates a new  form field",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "class",
                        "in": "query",
                        "description": "Class name (QuoteCategory /  ContestType).",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The  form field JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addFormField"
                        }
                    }
                ],
                "tags": [
                    "FormField"
                ],
                "responses": {
                    "200": {
                        "description": "New quote form field added",
                        "schema": {
                            "$ref": "#/definitions/FormField"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/form_fields/{FormFieldId}": {
            "get": {
                "summary": "Fetch  form field",
                "description": "Returns a  form field based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "FormFieldId",
                        "in": "path",
                        "description": "ID of  form field to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "FormField"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched  form field",
                        "schema": {
                            "$ref": "#/definitions/FormField"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update form field by its id",
                "description": "Update form field by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "FormFieldId",
                        "in": "path",
                        "description": "ID of quote form field to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The quote form field JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addFormField"
                        }
                    }
                ],
                "tags": [
                    "FormField"
                ],
                "responses": {
                    "200": {
                        "description": "Form Field updated",
                        "schema": {
                            "$ref": "#/definitions/FormField"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete form field",
                "description": "Deletes a single form field based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "FormFieldId",
                        "in": "path",
                        "description": "ID of  form field to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "FormField"
                ],
                "responses": {
                    "200": {
                        "description": "Form Field deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/form_field_groups": {
            "post": {
                "summary": "Creates a new form field group",
                "description": "Creates a new form field group",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The form field group JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addFormFieldGroup"
                        }
                    }
                ],
                "tags": [
                    "FormFieldGroup"
                ],
                "responses": {
                    "200": {
                        "description": "New form field group added",
                        "schema": {
                            "$ref": "#/definitions/FormFieldGroup"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/form_field_groups/{formFieldGroupId}": {
            "put": {
                "summary": "Update form field group by its id",
                "description": "Update form field group by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "formFieldGroupId",
                        "in": "path",
                        "description": "ID of form field group to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The form field group JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addFormFieldGroup"
                        }
                    }
                ],
                "tags": [
                    "FormFieldGroup"
                ],
                "responses": {
                    "200": {
                        "description": "Form Field Group updated",
                        "schema": {
                            "$ref": "#/definitions/FormFieldGroup"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/input_types": {
            "get": {
                "summary": "Fetch all input types",
                "description": "Returns all input types from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "InputType"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched input types",
                        "schema": {
                            "$ref": "#/definitions/InputType"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/reviews": {
            "get": {
                "summary": "Fetch all reviews",
                "description": "Returns all reviews from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "model_id",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "class",
                        "in": "query",
                        "description": "Class name (ContestUser / QuoteService / QuoteBid / Contest / Project)",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "foreign_id",
                        "in": "query",
                        "description": "Id of foreign to fetch.",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "(all/employer/freelancer)",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "to_user_id",
                        "in": "query",
                        "description": "Id of to_user_id to fetch.",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Review"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched reviews",
                        "schema": {
                            "$ref": "#/definitions/Review"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new review",
                "description": "Creates a new review",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The review JSON you want to post class value will be (ContestUser / QuoteRequest / QuoteService / Project )",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addReview"
                        }
                    }
                ],
                "tags": [
                    "Review"
                ],
                "responses": {
                    "200": {
                        "description": "New review added",
                        "schema": {
                            "$ref": "#/definitions/Review"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/reviews/{reviewId}": {
            "get": {
                "summary": "Fetch review",
                "description": "Returns a review based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "reviewId",
                        "in": "path",
                        "description": "ID of review to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Review"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched review",
                        "schema": {
                            "$ref": "#/definitions/Review"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update review by its id",
                "description": "Update review by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "reviewId",
                        "in": "path",
                        "description": "ID of review to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The review JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addQuoteBidReview"
                        }
                    }
                ],
                "tags": [
                    "Review"
                ],
                "responses": {
                    "200": {
                        "description": "Review updated",
                        "schema": {
                            "$ref": "#/definitions/Review"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete review",
                "description": "Deletes a single review based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "reviewId",
                        "in": "path",
                        "description": "ID of review to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "Review"
                ],
                "responses": {
                    "200": {
                        "description": "Review deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/users/{userId}/transactions": {
            "get": {
                "summary": "Fetch user wise transactions",
                "description": "Returns user wise transactions from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "ID of user to fetch transaction",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "type(today,this_week,this_month,custom)",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "from_date",
                        "in": "query",
                        "description": "from date for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "to_date",
                        "in": "query",
                        "description": "to_date for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "model_id",
                        "in": "query",
                        "description": "model id for records",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "model_class",
                        "in": "query",
                        "description": "model class for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Transactions"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched user transactions",
                        "schema": {
                            "$ref": "#/definitions/Transaction"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/views": {
            "get": {
                "summary": "Fetch all views",
                "description": "Returns all views from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "class",
                        "in": "query",
                        "description": "Class name ( User / Portfolio /  Contest / Project / QuoteService / Job / Exam ).",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "foreign_id",
                        "in": "query",
                        "description": "Id of foreign to fetch.",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "View"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched views",
                        "schema": {
                            "$ref": "#/definitions/View"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new view",
                "description": "Creates a new view",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The review JSON you want to post class value will be ( User / Portfolio /  Contest / Project / QuoteService / Job / Exam ).",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addView"
                        }
                    }
                ],
                "tags": [
                    "View"
                ],
                "responses": {
                    "200": {
                        "description": "New view added",
                        "schema": {
                            "$ref": "#/definitions/addView"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/views/{viewId}": {
            "get": {
                "summary": "Fetch view",
                "description": "Returns a view based on a single ID",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "viewId",
                        "in": "path",
                        "description": "ID of view to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "View"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched review",
                        "schema": {
                            "$ref": "#/definitions/Review"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete View",
                "description": "Deletes a single View based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "viewId",
                        "in": "path",
                        "description": "ID of view to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "View"
                ],
                "responses": {
                    "200": {
                        "description": "View deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/paypal/vaults": {
            "get": {
                "summary": "Fetch all vaults",
                "description": "Returns all vaults from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "from user Id",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "limit for records",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "PaypalREST"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched vaults",
                        "schema": {
                            "$ref": "#/definitions/PaypalVault"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new vault",
                "description": "Creates a new vault",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The vault JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addPaypalVault"
                        }
                    }
                ],
                "tags": [
                    "PaypalREST"
                ],
                "responses": {
                    "200": {
                        "description": "New vault added",
                        "schema": {
                            "$ref": "#/definitions/PaypalVault"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/paypal/vaults/{vaultId}": {
            "get": {
                "summary": "Update vault by its id",
                "description": "Update vault by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "vaultId",
                        "in": "path",
                        "description": "ID of vault to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "PaypalREST"
                ],
                "responses": {
                    "200": {
                        "description": "Vault updated",
                        "schema": {
                            "$ref": "#/definitions/PaypalVault"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update vault by its id",
                "description": "Update vault by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "vaultId",
                        "in": "path",
                        "description": "ID of vault to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The vault JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addPaypalVault"
                        }
                    }
                ],
                "tags": [
                    "PaypalREST"
                ],
                "responses": {
                    "200": {
                        "description": "Vault updated",
                        "schema": {
                            "$ref": "#/definitions/PaypalVault"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete vault",
                "description": "Deletes a single vault based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "vaultId",
                        "in": "path",
                        "description": "ID of vault to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "PaypalREST"
                ],
                "responses": {
                    "200": {
                        "description": "Vault deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/plugins": {
            "get": {
                "summary": "Fetch all Plugins",
                "description": "Returns all Plugins from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "Plugins"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched Plugins",
                        "schema": {
                            "$ref": "#/definitions/Plugin"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
             },
            "put": {
                "summary": "Update plugin by its id",
                "description": "Update plugin by its id",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "pluginName",
                        "in": "path",
                        "description": "plugin_name to update",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The review JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/updatePlugin"
                        }
                    }
                ],
                "tags": [
                    "Plugins"
                ],
                "responses": {
                    "200": {
                        "description": "Review updated",
                        "schema": {
                            "$ref": "#/definitions/Plugin"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }             
			},
        "/user_logins": {
            "get": {
                "summary": "Fetch all user logins",
                "description": "Returns all user logins from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }
                ],
                "tags": [
                    "UserLogin"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched user logins",
                        "schema": {
                            "$ref": "#/definitions/UserLogin"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/user_logins/{userLoginId}": {
            "get": {
                "summary": "Fetch user wise transactions",
                "description": "Returns user wise transactions from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "userLoginId",
                        "in": "path",
                        "description": "ID of userLoginId to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "UserLogin"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched  UserLogin",
                        "schema": {
                            "$ref": "#/definitions/UserLogin"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete UserLogin",
                "description": "Deletes a single UserLogin based on the ID supplied",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "userLoginId",
                        "in": "path",
                        "description": "ID of UserLogin to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "tags": [
                    "UserLogin"
                ],
                "responses": {
                    "200": {
                        "description": "UserLogin deleted"
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
               }
            }
        },
        "/translations": {
            "get": {
                "summary": "Fetch all translations",
                "description": "Returns all translations from the system",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Fields to sort",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "sortby",
                        "in": "query",
                        "description": "Sort direction",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page to fetch",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields list to fetch",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "Keywords to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "lang_code",
                        "in": "query",
                        "description": "lang code to search",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "File list to search(filelist)",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    }                    
                ],
                "tags": [
                    "Translation"
                ],
                "responses": {
                    "200": {
                        "description": "Fetched translations",
                        "schema": {
                            "$ref": "#/definitions/Translation"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Creates a new Translation",
                "description": "Creates a new Translation",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The transaltion JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/addTranslation"
                        }
                    }
                ],
                "tags": [
                    "Translation"
                ],
                "responses": {
                    "200": {
                        "description": "New translation added",
                        "schema": {
                            "$ref": "#/definitions/Translation"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/translations/{langCode}": {
            "put": {
                "summary": "Edit Translation",
                "description": "Edit Translation",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "langCode",
                        "in": "path",
                        "description": "OAuth token",
                        "required": true,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The transaltion JSON you want to post",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/editTranslation"
                        }
                    }
                ],
                "tags": [
                    "Translation"
                ],
                "responses": {
                    "200": {
                        "description": "Update Translation",
                        "schema": {
                            "$ref": "#/definitions/updateTranslation"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }         
    },   
    "definitions": {
        "addUser": {
            "type": "object",
            "properties": {
                "username": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "is_agree_terms_conditions": {
                    "type": "integer",
                    "format": "int32"
                },
                "image": {
                    "type": "string"
                },
                "is_freelancer": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_employer": {
                    "type": "integer",
                    "format": "int32"
                },
                "address": {
                    "type": "string"
                },
                "address1": {
                    "type": "string"
                },
                "city": {
                    "$ref": "#/definitions/editCity"
                },
                "state": {
                    "$ref": "#/definitions/editState"
                },
                "country": {
                    "$ref": "#/definitions/editCountry"
                },
                "zip_code": {
                    "type": "string"
                },
                "full_address": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number",
                    "format": "float"
                },
                "longitude": {
                    "type": "number",
                    "format": "float"
                },
                "cover_photo": {
                    "type": "string"
                },
                "hourly_rate": {
                    "type": "number",
                    "format": "float"
                },
                "designation": {
                    "type": "string"
                },
                "about_me": {
                    "type": "string"
                }
            }
        },
        "addAdminUser": {
            "type": "object",
            "properties": {
                "username": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "is_agree_terms_conditions": {
                    "type": "integer",
                    "format": "int32"
                },
                "image": {
                    "type": "string"
                },
                "role_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "address": {
                    "type": "string"
                },
                "address1": {
                    "type": "string"
                },
                "city": {
                    "$ref": "#/definitions/editCity"
                },
                "state": {
                    "$ref": "#/definitions/editState"
                },
                "country": {
                    "$ref": "#/definitions/editCountry"
                },
                "zip_code": {
                    "type": "string"
                },
                "full_address": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number",
                    "format": "float"
                },
                "longitude": {
                    "type": "number",
                    "format": "float"
                },
                "cover_photo": {
                    "type": "string"
                },
                "hourly_rate": {
                    "type": "number",
                    "format": "float"
                },
                "designation": {
                    "type": "string"
                },
                "about_me": {
                    "type": "string"
                }
            }
        },
        "loginUser": {
            "type": "object",
            "properties": {
                "username": {
                    "type": "string",
                    "format": "string"
                },
                "password": {
                    "type": "string",
                    "format": "string"
                }
            }
        },
        "forgotPasswordUser": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "format": "string"
                }
            }
        },
        "changePasswordUser": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string",
                    "description": "Old password"
                },
                "new_password": {
                    "type": "string",
                    "description": "New password"
                }
            }
        },
        "AdminchangePasswordToUser": {
            "type": "object",
            "properties": {
                "user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "new_password": {
                    "type": "string",
                    "description": "New password"
                },
                "new_confirm_password": {
                    "type": "string",
                    "description": "New confirm password"
                }
            }
        },
        "User": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "role_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "username": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "bid_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "won_bid_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "user_login_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "project_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "project_flag_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "job_flag_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "quote_service_flag_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "portfolio_flag_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "available_wallet_amount": {
                    "type": "number",
                    "format": "float"
                },
                "ip_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "last_login_ip_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "last_logged_in_time": {
                    "type": "string"
                },
                "is_agree_terms_conditions": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_email_confirmed": {
                    "type": "integer",
                    "format": "int32"
                },
                "total_amount_withdrawn": {
                    "type": "number",
                    "format": "float"
                },
                "job_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "job_apply_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "portfolio_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "follower_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "quote_service_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "quote_request_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "quote_bid_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "quote_credit_purchase_log_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "exams_user_count": {
                    "type": "integer",
                    "format": "int32"
                },
                "exams_user_passed_count": {
                    "type": "integer",
                    "format": "int32"
                },
                "zazpay_receiver_account_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "available_credit_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "total_credit_bought": {
                    "type": "integer",
                    "format": "int64"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "gender_id": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "updateUser": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "is_agree_terms_conditions": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_email_confirmed": {
                    "type": "integer",
                    "format": "int32"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "gender_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "image": {
                    "type": "string"
                },
                "add_fund": {
                    "type": "number",
                    "format": "float"
                },
                "deduct_fund": {
                    "type": "number",
                    "format": "float"
                },
                "address": {
                    "type": "string"
                },
                "address1": {
                    "type": "string"
                },
                "city": {
                    "$ref": "#/definitions/editCity"
                },
                "state": {
                    "$ref": "#/definitions/editState"
                },
                "country": {
                    "$ref": "#/definitions/editCountry"
                },
                "zip_code": {
                    "type": "string"
                },
                "full_address": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number",
                    "format": "float"
                },
                "longitude": {
                    "type": "number",
                    "format": "float"
                },
                "cover_photo": {
                    "type": "string"
                },
                "hourly_rate": {
                    "type": "number",
                    "format": "float"
                },
                "designation": {
                    "type": "string"
                },
                "about_me": {
                    "type": "string"
                },
                "skills": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Skills"
                    }
                },
                "is_have_unreaded_activity": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "addProvider": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "secret_key": {
                    "type": "string"
                },
                "api_key": {
                    "type": "string"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "addSociallogin": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "access_token": {
                    "type": "string"
                },
                "oauth_verifier": {
                    "type": "string"
                },
                "oauth_token": {
                    "type": "string"
                },
                "is_freelancer": {
                    "type": "integer",
					"format": "int32"
                },
                "is_employer": {
                    "type": "integer",
					"format": "int32"
                }
            }
        },
        "Provider": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "secret_key": {
                    "type": "string"
                },
                "api_key": {
                    "type": "string"
                },
                "icon_class": {
                    "type": "string"
                },
                "button_class": {
                    "type": "string"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                },
                "position": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "Role": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "addMoneyTransferAccount": {
            "type": "object",
            "properties": {
                "account": {
                    "type": "string"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_primary": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "MoneyTransferAccount": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "account": {
                    "type": "string"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_primary": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "addUserCashWithdrawal": {
            "type": "object",
            "properties": {
                "money_transfer_account_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "amount": {
                    "type": "number",
                    "format": "float"
                },
                "remark": {
                    "type": "string"
                }                
            }
        },
        "UserCashWithdrawal": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "money_transfer_account_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "withdrawal_status_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "amount": {
                    "type": "number",
                    "format": "float"
                },
                "remark": {
                    "type": "string"
                }
            }
        },
        "addContact": {
            "type": "object",
            "properties": {
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "Contact": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "ip_id": {
                    "type": "string"
                }
            }
        },
        "Transaction": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "to_user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "foreign_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "class": {
                    "type": "string"
                },
                "transaction_type": {
                    "type": "string"
                },
                "payment_gateway_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "amount": {
                    "type": "number",
                    "format": "float"
                },
                "site_revenue_from_freelancer": {
                    "type": "number",
                    "format": "float"
                },
                "site_revenue_from_employer": {
                    "type": "number",
                    "format": "float"
                }
            }
        },
        "PaymentGateway": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "display_name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "gateway_fees": {
                    "type": "number",
                    "format": "float"
                },
                "transaction_count": {
                    "type": "integer",
                    "format": "int32"
                },
                "payment_gateway_setting_count": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_test_mode": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_enable_for_wallet": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "addPage": {
            "type": "object",
            "properties": {
                "title": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "meta_keywords": {
                    "type": "string"
                },
                "description_meta_tag": {
                    "type": "string"
                },
                "is_default": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "Page": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "meta_keywords": {
                    "type": "string"
                },
                "description_meta_tag": {
                    "type": "string"
                },
                "is_default": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "SettingCategory": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "parent_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                }
            }
        },
        "addSetting": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "allowed_countries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AllowedCountries"
                    }
                },
                "allowed_cities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AllowedCities"
                    }
                }
            }
        },
        "AllowedCountries": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "AllowedCities": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "Setting": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "setting_category_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "position": {
                    "type": "integer",
                    "format": "int32"
                },
                "options": {
                    "type": "string"
                }
            }
        },
        "EmailTemplate": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int32"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "format": "string"
                },
                "display_name": {
                    "type": "string",
                    "format": "string"
                },
                "description": {
                    "type": "string",
                    "format": "string"
                },
                "from": {
                    "type": "string",
                    "format": "string"
                },
                "reply_to": {
                    "type": "string",
                    "format": "string"
                },
                "subject": {
                    "type": "string",
                    "format": "string"
                },
                "email_variables": {
                    "type": "string",
                    "format": "string"
                },
                "html_email_content": {
                    "type": "string",
                    "format": "string"
                },
                "text_email_content": {
                    "type": "string",
                    "format": "string"
                }
            }
        },
        "addEmailTemplate": {
            "type": "object",
            "properties": {
                "from": {
                    "type": "string",
                    "format": "string"
                },
                "reply_to": {
                    "type": "string",
                    "format": "string"
                },
                "subject": {
                    "type": "string",
                    "format": "string"
                },
                "html_email_content": {
                    "type": "string",
                    "format": "string"
                },
                "text_email_content": {
                    "type": "string",
                    "format": "string"
                }
            }
        },
        "addCity": {
            "type": "object",
            "properties": {
                "country_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "state_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "City": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "country_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "state_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "addState": {
            "type": "object",
            "properties": {
                "country_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "State": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "country_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "addCountry": {
            "type": "object",
            "properties": {
                "iso_alpha2": {
                    "type": "string"
                },
                "iso_alpha3": {
                    "type": "string"
                },
                "iso_numeric": {
                    "type": "integer",
                    "format": "int32"
                },
                "fips_code": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "capital": {
                    "type": "string"
                },
                "areainsqkm": {
                    "type": "number",
                    "format": "float"
                },
                "population": {
                    "type": "integer",
                    "format": "int32"
                },
                "continent": {
                    "type": "string"
                },
                "tld": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "currencyname": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "postalcodeformat": {
                    "type": "string"
                },
                "postalcoderegex": {
                    "type": "string"
                },
                "languages": {
                    "type": "string"
                },
                "geonameid": {
                    "type": "integer",
                    "format": "int32"
                },
                "neighbours": {
                    "type": "string"
                },
                "equivalentfipscode": {
                    "type": "string"
                }
            }
        },
        "Country": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int32"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "iso_alpha2": {
                    "type": "string"
                },
                "iso_alpha3": {
                    "type": "string"
                },
                "iso_numeric": {
                    "type": "integer",
                    "format": "int32"
                },
                "fips_code": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "capital": {
                    "type": "string"
                },
                "areainsqkm": {
                    "type": "number",
                    "format": "float"
                },
                "population": {
                    "type": "integer",
                    "format": "int32"
                },
                "continent": {
                    "type": "string"
                },
                "tld": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "currencyname": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "postalcodeformat": {
                    "type": "string"
                },
                "postalcoderegex": {
                    "type": "string"
                },
                "languages": {
                    "type": "string"
                },
                "geonameid": {
                    "type": "integer",
                    "format": "int32"
                },
                "neighbours": {
                    "type": "string"
                },
                "equivalentfipscode": {
                    "type": "string"
                }
            }
        },
        "addLanguage": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "iso2": {
                    "type": "string"
                },
                "iso3": {
                    "type": "string"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "Language": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "iso2": {
                    "type": "string"
                },
                "iso3": {
                    "type": "string"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "editQuoteBid": {
            "type": "object",
            "properties": {
                "quote_amount": {
                    "type": "number",
                    "format": "float"
                },
                "quote_type": {
                    "type": "string"
                },
                "price_note": {
                    "type": "string"
                },
                "quote_status_id": {
                    "type": "number",
                    "format": "int"
                },
                "is_provider_readed": {
                    "type": "number",
                    "format": "int"
                },
                "is_requestor_readed": {
                    "type": "number",
                    "format": "int"
                },
                "is_okay_with_delay_quote": {
                    "type": "integer",
                    "format": "int64"
                },
                "private_note_of_incomplete": {
                    "type": "string"
                }
            }
        },
        "QuoteBid": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "quote_request_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "quote_service_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "quote_status_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "is_direct_send": {
                    "type": "integer",
                    "format": "int32"
                },
                "quote_amount": {
                    "type": "number",
                    "format": "float"
                },
                "quote_type": {
                    "type": "string"
                },
                "price_note": {
                    "type": "string"
                },
                "quote_last_update_on": {
                    "type": "string"
                },
                "hired_on": {
                    "type": "string"
                },
                "completed_on": {
                    "type": "string"
                },
                "requestor_received_message_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "provider_received_message_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "requestor_unread_message_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "provider_unread_message_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "is_provider_readed": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_requestor_readed": {
                    "type": "integer",
                    "format": "int32"
                },
                "used_credit_count": {
                    "type": "integer",
                    "format": "int32"
                },
                "user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "service_provider_user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "quote_bid_status_id": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "addQuoteCategory": {
            "type": "object",
            "required": [
                "name",
                "is_active",
                "credit_point_for_sending_quote"
            ],
            "properties": {
                "parent_category_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                },
                "credit_point_for_sending_quote": {
                    "type": "integer",
                    "format": "int64"
                },
                "description": {
                    "type": "string",
                    "description": "description"
                },
                "image": {
                    "type": "string"
                },
                "is_featured": {
                    "type": "integer",
                    "format": "int32"
                },
                "form_field_groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/addFormFieldGroups"
                    }
                }
            }
        },
        "QuoteCategory": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "parent_category_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "form_field_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "quote_request_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                },
                "credit_point_for_sending_quote": {
                    "type": "integer",
                    "format": "int64"
                },
                "description": {
                    "type": "string",
                    "description": "description"
                },
                "is_featured": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "addCreditPurchaseLog": {
            "type": "object",
            "required": [
                "credit_purchase_plan_id",
                "payment_gateway_id",
                "gateway_id",
                "buyer_name",
                "buyer_email",
                "buyer_address",
                "buyer_city",
                "buyer_state",
                "buyer_country_iso2",
                "buyer_phone",
                "buyer_zip_code",
                "credit_card_code",
                "credit_card_expire",
                "credit_card_name_on_card",
                "credit_card_number"
            ],
            "properties": {
                "credit_purchase_plan_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "payment_gateway_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "gateway_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "buyer_name": {
                    "type": "string"
                },
                "buyer_email": {
                    "type": "string"
                },
                "buyer_address": {
                    "type": "string"
                },
                "buyer_city": {
                    "type": "string"
                },
                "buyer_state": {
                    "type": "string"
                },
                "buyer_country_iso2": {
                    "type": "string"
                },
                "buyer_phone": {
                    "type": "integer",
                    "format": "int64"
                },
                "buyer_zip_code": {
                    "type": "integer",
                    "format": "int64"
                },
                "credit_card_code": {
                    "type": "integer",
                    "format": "int64"
                },
                "credit_card_expire": {
                    "type": "string"
                },
                "credit_card_name_on_card": {
                    "type": "string"
                },
                "credit_card_number": {
                    "type": "integer",
                    "format": "int64"
                },
                "credit_card_type": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "cvv2": {
                    "type": "string"
                },
                "expire_month": {
                    "type": "string"
                },
                "expire_year": {
                    "type": "string"
                },
                "vault_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "coupon_code": {
                    "type": "string"
                }
            }
        },
        "CreditPurchaseLog": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "credit_purchase_plan_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "credit_count": {
                    "type": "integer",
                    "format": "int32"
                },
                "price": {
                    "type": "number",
                    "format": "float"
                },
                "discount_percentage": {
                    "type": "number",
                    "format": "float"
                },
                "original_price": {
                    "type": "number",
                    "format": "float"
                },
                "payment_gateway_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "gateway_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "is_payment_completed": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "addCreditPurchasePlan": {
            "type": "object",
            "required": [
                "name",
                "no_of_credits",
                "discount_percentage",
                "original_price"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "no_of_credits": {
                    "type": "integer",
                    "format": "int64"
                },
                "discount_percentage": {
                    "type": "number",
                    "format": "float"
                },
                "original_price": {
                    "type": "number",
                    "format": "float"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int64"
                },
                "is_welcome_plan": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "CreditPurchasePlan": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int32"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "no_of_credits": {
                    "type": "integer",
                    "format": "int64"
                },
                "price": {
                    "type": "number",
                    "format": "float"
                },
                "discount_percentage": {
                    "type": "number",
                    "format": "float"
                },
                "original_price": {
                    "type": "number",
                    "format": "float"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "updateCreditPurchaseLog": {
            "type": "object",
            "properties": {
                "credit_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "is_payment_completed": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "addQuoteFaqAnswer": {
            "type": "object",
            "required": [
                "quote_service_id",
                "answer"
            ],
            "properties": {
                "quote_service_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "quote_faq_question_template_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "question": {
                    "type": "string"
                },
                "answer": {
                    "type": "string"
                }
            }
        },
        "QuoteFaqAnswer": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "quote_service_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "quote_faq_question_template_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "quote_user_faq_question_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "answer": {
                    "type": "string"
                }
            }
        },
        "addQuoteFaqQuestionTemplate": {
            "type": "object",
            "required": [
                "question"
            ],
            "properties": {
                "question": {
                    "type": "string"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "QuoteFaqQuestionTemplate": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "question": {
                    "type": "string"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "addFormField": {
            "type": "object",
            "required": [
                "length",
                "is_required",
                "is_active",
                "display_order"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "input_type_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "foreign_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "form_field_group_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "label": {
                    "type": "string"
                },
                "info": {
                    "type": "string"
                },
                "length": {
                    "type": "integer",
                    "format": "int64"
                },
                "options": {
                    "type": "string"
                },
                "is_required": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                },
                "display_order": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "FormField": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "info": {
                    "type": "string"
                },
                "length": {
                    "type": "integer",
                    "format": "int64"
                },
                "options": {
                    "type": "string"
                },
                "class": {
                    "type": "string"
                },
                "input_type_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "foreign_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "form_field_group_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "is_required": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                },
                "display_order": {
                    "type": "integer",
                    "format": "int32"
                },
                "depends_on": {
                    "type": "string"
                },
                "depends_value": {
                    "type": "string"
                }
            }
        },
        "addFormFields": {
            "type": "object",
            "required": [
                "length",
                "is_required",
                "is_active",
                "display_order"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "display_name": {
                    "type": "string"
                },
                "input_type_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "info": {
                    "type": "string"
                },
                "is_required": {
                    "type": "integer",
                    "format": "int32"
                },
                "label": {
                    "type": "string"
                },
                "depends_on": {
                    "type": "string",
                    "format": "string"
                },
                "depends_value": {
                    "type": "string",
                    "format": "string"
                },
                "display_order": {
                    "type": "integer",
                    "format": "int32"
                },
                "options": {
                    "type": "string"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "addQuoteRequestFormField": {
            "type": "object",
            "required": [
                "form_field_id",
                "quote_request_id"
            ],
            "properties": {
                "form_field_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "quote_request_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "response": {
                    "type": "string"
                }
            }
        },
        "QuoteRequestFormField": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "form_field_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "quote_request_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "response": {
                    "type": "string"
                }
            }
        },
        "addQuoteRequest": {
            "type": "object",
            "required": [
                "title",
                "description",
                "best_day_time_for_work",
                "is_send_request_to_other_service_providers"
            ],
            "properties": {
                "quote_category_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "quote_service_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "title": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "best_day_time_for_work": {
                    "type": "string"
                },
                "full_address": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                },
                "city_name": {
                    "type": "string"
                },
                "state_name": {
                    "type": "string"
                },
                "country_iso2": {
                    "type": "string"
                },
                "zip_code": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number",
                    "format": "float"
                },
                "longitude": {
                    "type": "number",
                    "format": "float"
                },
                "phone_no": {
                    "type": "string"
                },
                "is_send_request_to_other_service_providers": {
                    "type": "integer",
                    "format": "int32"
                },
                "form_field_submissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/addFormFieldSubmission"
                    }
                },
                "is_request_for_buy": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_archived": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "QuoteRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "quote_category_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "quote_service_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "title": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "best_day_time_for_work": {
                    "type": "string"
                },
                "full_address": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                },
                "city_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "state_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "country_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "zip_code": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number",
                    "format": "float"
                },
                "longitude": {
                    "type": "number",
                    "format": "float"
                },
                "phone_no": {
                    "type": "string"
                },
                "quote_bid_count": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_archived": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_send_request_to_other_service_providers": {
                    "type": "integer",
                    "format": "int32"
                },
                "quote_bid_new_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "quote_bid_discussion_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "quote_bid_hired_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "quote_bid_completed_count": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "addQuoteServiceAudio": {
            "type": "object",
            "required": [
                "embed_code"
            ],
            "properties": {
                "quote_service_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "embed_code": {
                    "type": "string"
                }
            }
        },
        "QuoteServiceAudio": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "quote_service_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "embed_code": {
                    "type": "string"
                }
            }
        },
        "addQuoteServicePhoto": {
            "type": "object",
            "required": [
                "quote_service_id"
            ],
            "properties": {
                "quote_service_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "caption": {
                    "type": "string"
                },
                "image": {
                    "type": "string",
                    "format": "string"
                }
            }
        },
        "QuoteServicePhoto": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "quote_service_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "caption": {
                    "type": "string"
                }
            }
        },
        "addQuoteService": {
            "type": "object",
            "required": [
                "business_name",
                "how_does_your_service_stand_out",
                "full_address",
                "address",
                "city_name",
                "state_name",
                "country_iso2",
                "latitude",
                "longitude",
                "website_url",
                "phone_number",
                "is_service_provider_travel_to_customer_place",
                "is_customer_travel_to_me",
                "is_over_phone_or_internet",
                "what_do_you_enjoy_about_the_work_you_do"
            ],
            "properties": {
                "business_name": {
                    "type": "string"
                },
                "how_does_your_service_stand_out": {
                    "type": "string"
                },
                "full_address": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                },
                "city_name": {
                    "type": "string"
                },
                "state_name": {
                    "type": "string"
                },
                "country_iso2": {
                    "type": "string"
                },
                "zip_code": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number",
                    "format": "float"
                },
                "longitude": {
                    "type": "number",
                    "format": "float"
                },
                "website_url": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "is_service_provider_travel_to_customer_place": {
                    "type": "integer",
                    "format": "int32"
                },
                "service_provider_travels_upto": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_customer_travel_to_me": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_over_phone_or_internet": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                },
                "year_founded": {
                    "type": "integer",
                    "format": "int64"
                },
                "number_of_employees": {
                    "type": "integer",
                    "format": "int64"
                },
                "what_do_you_enjoy_about_the_work_you_do": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "quote_categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/servicecategoryid"
                    }
                }
            }
        },
        "servicecategoryid": {
            "type": "object",
            "properties": {
                "quote_category_id": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "QuoteService": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "business_name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "how_does_your_service_stand_out": {
                    "type": "string"
                },
                "full_address": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                },
                "city_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "state_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "country_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "zip_code": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number",
                    "format": "float"
                },
                "longitude": {
                    "type": "number",
                    "format": "float"
                },
                "website_url": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "is_service_provider_travel_to_customer_place": {
                    "type": "integer",
                    "format": "int32"
                },
                "service_provider_travels_upto": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_customer_travel_to_me": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_over_phone_or_internet": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                },
                "quote_service_photo_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "quote_service_audio_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "quote_service_video_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "quote_faq_answer_count": {
                    "type": "integer",
                    "format": "int32"
                },
                "quote_bid_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "quote_service_flag_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "newly_received_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "hired_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "completed_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "year_founded": {
                    "type": "integer",
                    "format": "int64"
                },
                "number_of_employees": {
                    "type": "integer",
                    "format": "int64"
                },
                "what_do_you_enjoy_about_the_work_you_do": {
                    "type": "string"
                },
                "quote_bid_new_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "quote_bid_discussion_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "quote_bid_hired_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "quote_bid_completed_count": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "addQuoteServiceVideo": {
            "type": "object",
            "required": [
                "quote_service_id",
                "video_url"
            ],
            "properties": {
                "quote_service_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "video_url": {
                    "type": "string",
                    "format": "byte"
                }
            }
        },
        "QuoteServiceVideo": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "quote_service_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "embed_code": {
                    "type": "string"
                }
            }
        },
        "addQuoteUserFaqQuestion": {
            "type": "object",
            "required": [
                "user_id"
            ],
            "properties": {
                "user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "question": {
                    "type": "string"
                }
            }
        },
        "QuoteUserFaqQuestion": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "question": {
                    "type": "string"
                }
            }
        },
        "addQuoteBidReview": {
            "type": "object",
            "required": [
                "rating"
            ],
            "properties": {
                "rating": {
                    "type": "integer",
                    "format": "int32"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "Review": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int32"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "to_user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "foreign_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "class": {
                    "type": "string"
                },
                "rating": {
                    "type": "integer",
                    "format": "int32"
                },
                "message": {
                    "type": "string"
                },
                "ip_id": {
                    "type": "integer"
                },
                "is_freelancer": {
                    "type": "integer"
                },
                "model_class": {
                    "type": "string"
                }
            }
        },
        "addJob": {
            "type": "object",
            "required": [
                "job_category_id",
                "title",
                "description",
                "company_name",
                "job_url",
                "no_of_opening"
            ],
            "properties": {
                "job_status_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "job_type_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "job_category_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "title": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                },
                "address1": {
                    "type": "string"
                },
                "city": {
                    "$ref": "#/definitions/editCity"
                },
                "state": {
                    "$ref": "#/definitions/editState"
                },
                "country": {
                    "$ref": "#/definitions/editCountry"
                },
                "zip_code": {
                    "type": "string"
                },
                "full_address": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number",
                    "format": "float"
                },
                "longitude": {
                    "type": "number",
                    "format": "float"
                },
                "salary_from": {
                    "type": "number",
                    "format": "float"
                },
                "salary_to": {
                    "type": "number",
                    "format": "float"
                },
                "salary_type_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_show_salary": {
                    "type": "integer",
                    "format": "int32"
                },
                "last_date_to_apply": {
                    "type": "string"
                },
                "no_of_opening": {
                    "type": "integer",
                    "format": "int32"
                },
                "company_name": {
                    "type": "string"
                },
                "company_website": {
                    "type": "string"
                },
                "apply_via": {
                    "type": "string"
                },
                "job_url": {
                    "type": "string"
                },
                "is_featured": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_urgent": {
                    "type": "integer",
                    "format": "int32"
                },
                "image": {
                    "type": "string"
                },
                "skills": {
                    "type": "string"
                },
                "payment_gateway_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "gateway_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "buyer_name": {
                    "type": "string"
                },
                "buyer_email": {
                    "type": "string"
                },
                "buyer_address": {
                    "type": "string"
                },
                "buyer_city": {
                    "type": "string"
                },
                "buyer_state": {
                    "type": "string"
                },
                "buyer_country_iso2": {
                    "type": "string"
                },
                "buyer_phone": {
                    "type": "integer",
                    "format": "int64"
                },
                "buyer_zip_code": {
                    "type": "integer",
                    "format": "int64"
                },
                "credit_card_code": {
                    "type": "integer",
                    "format": "int64"
                },
                "credit_card_expire": {
                    "type": "string"
                },
                "credit_card_name_on_card": {
                    "type": "string"
                },
                "credit_card_number": {
                    "type": "integer",
                    "format": "int64"
                },
                "minimum_experience": {
                    "type": "integer",
                    "format": "int64"
                },
                 "maximum_experience": {
                    "type": "integer",
                    "format": "int64"
                }
           }
        },
        "Skills": {
            "type": "object",
            "properties": {
                "skill_id": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "updateJob": {
            "type": "object",
            "required": [
                "job_category_id",
                "title",
                "description",
                "company_name",
                "job_url",
                "no_of_opening"
            ],
            "properties": {
                "job_status_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "job_type_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "job_category_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "title": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                },
                "address1": {
                    "type": "string"
                },
                "city": {
                    "$ref": "#/definitions/editCity"
                },
                "state": {
                    "$ref": "#/definitions/editState"
                },
                "country": {
                    "$ref": "#/definitions/editCountry"
                },
                "zip_code": {
                    "type": "string"
                },
                "full_address": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number",
                    "format": "float"
                },
                "longitude": {
                    "type": "number",
                    "format": "float"
                },
                "salary_from": {
                    "type": "number",
                    "format": "float"
                },
                "salary_to": {
                    "type": "number",
                    "format": "float"
                },
                "salary_type_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_show_salary": {
                    "type": "integer",
                    "format": "int32"
                },
                "last_date_to_apply": {
                    "type": "string"
                },
                "no_of_opening": {
                    "type": "integer",
                    "format": "int32"
                },
                "company_name": {
                    "type": "string"
                },
                "company_website": {
                    "type": "string"
                },
                "apply_via": {
                    "type": "string"
                },
                "job_url": {
                    "type": "string"
                },
                "is_featured": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_urgent": {
                    "type": "integer",
                    "format": "int32"
                },
                "image": {
                    "type": "string"
                },
                "skills": {
                    "type": "string"
                },
                "minimum_experience": {
                    "type": "integer",
                    "format": "int64"
                },
                 "maximum_experience": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "Job": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "job_status_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "job_type_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "job_category_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "title": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "job_location": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                },
                "city_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "state_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "country_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "zip_code": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number",
                    "format": "float"
                },
                "longitude": {
                    "type": "number",
                    "format": "float"
                },
                "salary_from": {
                    "type": "number",
                    "format": "float"
                },
                "salary_to": {
                    "type": "number",
                    "format": "float"
                },
                "salary_type_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_show_salary": {
                    "type": "integer",
                    "format": "int32"
                },
                "last_date_to_apply": {
                    "type": "string",
                    "format": "date"
                },
                "no_of_opening": {
                    "type": "integer",
                    "format": "int32"
                },
                "skills_set": {
                    "type": "string"
                },
                "company_name": {
                    "type": "string"
                },
                "company_website": {
                    "type": "string"
                },
                "ip_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "apply_via": {
                    "type": "string"
                },
                "job_url": {
                    "type": "string"
                },
                "featured_fee": {
                    "type": "number",
                    "format": "float"
                },
                "urgent_fee": {
                    "type": "number",
                    "format": "float"
                },
                "zazpay_revised_amount": {
                    "type": "number",
                    "format": "float"
                },
                "payment_gateway_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "zazpay_gateway_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "zazpay_payment_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "zazpay_pay_key": {
                    "type": "string"
                },
                "view_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "job_flag_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "job_apply_click_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "job_apply_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "is_featured": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_urgent": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_system_flagged": {
                    "type": "integer",
                    "format": "int32"
                },
                "detected_suspicious_words": {
                    "type": "string"
                },
                "admin_suspend": {
                    "type": "integer",
                    "format": "int32"
                },
                "full_address": {
                    "type": "string"
                }
            }
        },
        "addJobApply": {
            "type": "object",
            "required": [
                "job_id",
                "cover_letter"
            ],
            "properties": {
                "job_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "cover_letter": {
                    "type": "string"
                },
                "file": {
                    "type": "string"
                }
            }
        },
        "updateJobApply": {
            "type": "object",
            "required": [
                "job_apply_status_id"
            ],
            "properties": {
                "job_apply_status_id": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "JobApply": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "job_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "job_apply_status_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "cover_letter": {
                    "type": "string"
                },
                "total_resume_rating": {
                    "type": "integer",
                    "format": "int32"
                },
                "resume_rating_count": {
                    "type": "integer",
                    "format": "int32"
                },
                "ip_id": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "addJobApplyClick": {
            "type": "object",
            "required": [
                "job_id"
            ],
            "properties": {
                "job_id": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "JobApplyClick": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "job_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "ip_id": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "JobApplyStatus": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int32"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            }
        },
        "addJobCategory": {
            "type": "object",
            "required": [
                "name",
                "is_active"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "JobCategory": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "job_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                },
                "active_job_count": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "addJobType": {
            "type": "object",
            "required": [
                "name",
                "is_active"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "JobType": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int32"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "addSkill": {
            "type": "object",
            "required": [
                "name",
                "is_active"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "Skill": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int32"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "project_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "user_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "open_project_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                },
                "active_job_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "job_count": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "addPortfolio": {
            "type": "object",
            "required": [
                "description"
            ],
            "properties": {
                "title": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "description"
                },
                "image": {
                    "type": "string",
                    "description": "image"
                },
                "skills": {
                    "type": "string",
                    "description": "skills"
                }
            }
        },
        "updatePortfolio": {
            "type": "object",
            "required": [
                "description"
            ],
            "properties": {
                "title": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "description"
                },
                "skills": {
                    "type": "string",
                    "description": "skills"
                }
            }
        },
        "Portfolio": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "description": {
                    "type": "string"
                },
                "message_count": {
                    "type": "integer",
                    "format": "int32"
                },
                "follower_count": {
                    "type": "integer",
                    "format": "int32"
                },
                "view_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "flag_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "PortfolioTag": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "portfolio_count": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "addFlags": {
            "type": "object",
            "required": [
                "foreign_id",
                "flag_category_id",
                "message"
            ],
            "properties": {
                "foreign_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "class": {
                    "type": "string"
                },
                "flag_category_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "Flag": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string",
                    "format": "date"
                },
                "updated_at": {
                    "type": "string",
                    "format": "date"
                },
                "user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "foreign_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "class": {
                    "type": "string"
                },
                "flag_category_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "message": {
                    "type": "string"
                },
                "ip_id": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "addFlagCategory": {
            "type": "object",
            "required": [
                "name",
                "is_active"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "class": {
                    "type": "string"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "FlagCategory": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string",
                    "format": "date"
                },
                "updated_at": {
                    "type": "string",
                    "format": "date"
                },
                "user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                },
                "class": {
                    "type": "string"
                },
                "flag_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "addExam": {
            "type": "object",
            "required": [
                "question_display_type_id",
                "exam_level_id"
            ],
            "properties": {
                "question_display_type_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "topics_covered": {
                    "type": "string"
                },
                "instructions": {
                    "type": "string"
                },
                "splash_content": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "duration": {
                    "type": "integer",
                    "format": "int32"
                },
                "fee": {
                    "type": "number",
                    "format": "float"
                },
                "pass_mark_percentage": {
                    "type": "number",
                    "format": "float"
                },
                "exam_level_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_recommended": {
                    "type": "integer",
                    "format": "int32"
                },
                "exam_category_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "image": {
                    "type": "string"
                }
            }
        },
        "Exam": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "question_display_type_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "topics_covered": {
                    "type": "string"
                },
                "instructions": {
                    "type": "string"
                },
                "splash_content": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "duration": {
                    "type": "integer",
                    "format": "int32"
                },
                "fee": {
                    "type": "number",
                    "format": "float"
                },
                "pass_mark_percentage": {
                    "type": "integer",
                    "format": "int32"
                },
                "exams_question_count": {
                    "type": "integer",
                    "format": "int32"
                },
                "exams_user_count": {
                    "type": "integer",
                    "format": "int32"
                },
                "exam_level_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_recommended": {
                    "type": "integer",
                    "format": "int32"
                },
                "additional_time_to_expire": {
                    "type": "integer",
                    "format": "int32"
                },
                "total_fee_received": {
                    "type": "number",
                    "format": "float"
                },
                "exams_user_passed_count": {
                    "type": "integer",
                    "format": "int32"
                },
                "exam_view_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "parent_exam_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "exam_category_id": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "addExamCategory": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "ExamCategory": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "exam_count": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "addExamAnswer": {
            "type": "object",
            "properties": {
                "exams_user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "user_answer": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/addUserExamAnswer"
                    }
                },
                "is_exam_completed": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "addUserExamAnswer": {
            "type": "object",
            "required": [
                "question_id"
            ],
            "properties": {
                "question_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "answer": {
                    "type": "string"
                }
            }
        },
        "ExamAnswer": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "exam_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "question_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "exams_user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "user_answer": {
                    "type": "string"
                },
                "total_mark": {
                    "type": "number",
                    "format": "float"
                }
            }
        },
        "addExamLevel": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "ExamLevel": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "exam_count": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "addExamsQuestion": {
            "type": "object",
            "required": [
                "exam_id",
                "question_id"
            ],
            "properties": {
                "exam_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "question_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "display_order": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "ExamsQuestion": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "exam_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "question_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "display_order": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "addExamsUser": {
            "type": "object",
            "required": [
                "exam_id",
                "user_id"
            ],
            "properties": {
                "exam_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "payment_gateway_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "gateway_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "buyer_name": {
                    "type": "string"
                },
                "buyer_email": {
                    "type": "string"
                },
                "buyer_address": {
                    "type": "string"
                },
                "buyer_city": {
                    "type": "string"
                },
                "buyer_state": {
                    "type": "string"
                },
                "buyer_country_iso2": {
                    "type": "string"
                },
                "buyer_phone": {
                    "type": "integer",
                    "format": "int64"
                },
                "buyer_zip_code": {
                    "type": "integer",
                    "format": "int64"
                },
                "credit_card_code": {
                    "type": "integer",
                    "format": "int64"
                },
                "credit_card_expire": {
                    "type": "string"
                },
                "credit_card_name_on_card": {
                    "type": "string"
                },
                "credit_card_number": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "ExamsUser": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "exam_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "fee_paid": {
                    "type": "number",
                    "format": "float"
                },
                "total_mark": {
                    "type": "number",
                    "format": "float"
                },
                "total_mark_mean": {
                    "type": "number",
                    "format": "float"
                },
                "total_mark_standard_deviation": {
                    "type": "number",
                    "format": "float"
                },
                "exam_status_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "no_of_times": {
                    "type": "integer",
                    "format": "int32"
                },
                "exam_started_date": {
                    "type": "string"
                },
                "exam_end_date": {
                    "type": "string"
                },
                "exam_level_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "allow_duration": {
                    "type": "integer",
                    "format": "int32"
                },
                "total_question_count": {
                    "type": "integer",
                    "format": "int32"
                },
                "pass_mark_percentage": {
                    "type": "integer",
                    "format": "int32"
                },
                "payment_gateway_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "zazpay_gateway_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "zazpay_payment_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "zazpay_pay_key": {
                    "type": "string"
                },
                "zazpay_revised_amount": {
                    "type": "number",
                    "format": "float"
                },
                "taken_time": {
                    "type": "number",
                    "format": "float"
                },
                "percentile_rank": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "addQuestion": {
            "type": "object",
            "required": [
                "question_category_id",
                "question"
            ],
            "properties": {
                "question_category_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "question": {
                    "type": "string"
                },
                "info_tip": {
                    "type": "string"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                },
                "answer_options": {
                    "type": "string"
                },
                "current_answer": {
                    "type": "string"
                }
            }
        },
        "Question": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "question_category_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "question": {
                    "type": "string"
                },
                "info_tip": {
                    "type": "string"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                },
                "exams_question_count": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "addQuestionCategory": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "QuestionCategory": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "question_count": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "QuestionDisplayType": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int32"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "addContest": {
            "type": "object",
            "properties": {
                "contest_type_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "pricing_package_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "pricing_day_id": {
                    "type": "integer"
                },
                "resource_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "name": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "prize": {
                    "type": "number",
                    "format": "float"
                },
                "creation_cost": {
                    "type": "number",
                    "format": "float"
                },
                "is_pending_action_to_admin": {
                    "type": "integer",
                    "format": "int32"
                },
                "form_field_submissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/addFormFieldSubmission"
                    }
                }
            }
        },
        "updateContest": {
            "type": "object",
            "properties": {
                "contest_type_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "pricing_package_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "pricing_day_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "contest_status_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "name": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "prize": {
                    "type": "number",
                    "format": "float"
                },
                "creation_cost": {
                    "type": "number",
                    "format": "float"
                },
                "is_pending_action_to_admin": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_blind": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_private": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_featured": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_highlight": {
                    "type": "integer",
                    "format": "int32"
                },
                "form_field_submissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/addFormFieldSubmission"
                    }
                },
                "zazpay_payment_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "zazpay_gateway_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "buyer_name": {
                    "type": "string"
                },
                "buyer_email": {
                    "type": "string"
                },
                "buyer_address": {
                    "type": "string"
                },
                "buyer_city": {
                    "type": "string"
                },
                "buyer_state": {
                    "type": "string"
                },
                "buyer_country_iso2": {
                    "type": "string"
                },
                "buyer_phone": {
                    "type": "integer",
                    "format": "int64"
                },
                "buyer_zip_code": {
                    "type": "integer",
                    "format": "int64"
                },
                "credit_card_code": {
                    "type": "integer",
                    "format": "int64"
                },
                "credit_card_expire": {
                    "type": "string"
                },
                "credit_card_name_on_card": {
                    "type": "string"
                },
                "credit_card_number": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "Contest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int32"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "referred_by_user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "contest_type_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "contest_status_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_send_payment_notification": {
                    "type": "integer",
                    "format": "int32"
                },
                "contest_view_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "resource_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "pricing_package_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "pricing_day_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "maximum_entry_allowed": {
                    "type": "integer",
                    "format": "int32"
                },
                "maximum_entry_allowed_per_user": {
                    "type": "integer",
                    "format": "int64"
                },
                "reason_for_cancelation": {
                    "type": "string"
                },
                "prize": {
                    "type": "number",
                    "format": "float"
                },
                "creation_cost": {
                    "type": "number",
                    "format": "float"
                },
                "actual_end_date": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                },
                "refund_request_date": {
                    "type": "string"
                },
                "canceled_by_admin_date": {
                    "type": "string"
                },
                "winner_selected_date": {
                    "type": "string"
                },
                "judging_date": {
                    "type": "string"
                },
                "pending_action_to_admin_date": {
                    "type": "string"
                },
                "change_requested_date": {
                    "type": "string"
                },
                "change_completed_date": {
                    "type": "string"
                },
                "paid_to_participant_date": {
                    "type": "string"
                },
                "completed_date": {
                    "type": "string"
                },
                "files_expectation_date": {
                    "type": "string"
                },
                "partcipant_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "contest_user_count": {
                    "type": "integer",
                    "format": "int32"
                },
                "contest_comment_count": {
                    "type": "integer",
                    "format": "int32"
                },
                "contest_follower_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "contest_user_won_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "contest_user_eliminated_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "contest_user_withdrawn_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "contest_user_active_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "message_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "total_site_revenue": {
                    "type": "integer",
                    "format": "int64"
                },
                "winner_user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "payment_gateway_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "last_contest_user_entry_no": {
                    "type": "integer",
                    "format": "int64"
                },
                "is_system_flagged": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_user_flagged": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_admin_complete": {
                    "type": "integer",
                    "format": "int32"
                },
                "admin_suspend": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_winner_selected_by_admin": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_pending_action_to_admin": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_blind": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_private": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_featured": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_highlight": {
                    "type": "integer",
                    "format": "int32"
                },
                "blind_contest_fee": {
                    "type": "number",
                    "format": "float"
                },
                "private_contest_fee": {
                    "type": "number",
                    "format": "float"
                },
                "featured_contest_fee": {
                    "type": "number",
                    "format": "float"
                },
                "highlight_contest_fee": {
                    "type": "number",
                    "format": "float"
                },
                "detected_suspicious_words": {
                    "type": "string"
                },
                "reason_for_calcelation": {
                    "type": "string"
                },
                "site_commision": {
                    "type": "number",
                    "format": "float"
                },
                "is_paid": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_uploaded_entry_design": {
                    "type": "integer",
                    "format": "int32"
                },
                "admin_commission_amount": {
                    "type": "number",
                    "format": "float"
                },
                "affiliate_commission_amount": {
                    "type": "number",
                    "format": "float"
                },
                "zazpay_gateway_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "zazpay_payment_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "zazpay_pay_key": {
                    "type": "string"
                },
                "zazpay_revised_amount": {
                    "type": "number",
                    "format": "float"
                },
                "upgrade": {
                    "type": "string"
                }
            }
        },
        "addContestStatus": {
            "type": "object",
            "required": [
                "message"
            ],
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "ContestStatus": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int32"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "addContestType": {
            "type": "object",
            "required": [
                "name",
                "description",
                "maximum_entries_allowed",
                "minimum_prize",
                "maximum_entries_allowed_per_user"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "minimum_prize": {
                    "type": "number",
                    "format": "float"
                },
                "maximum_entries_allowed": {
                    "type": "integer",
                    "format": "int64"
                },
                "maximum_entries_allowed_per_user": {
                    "type": "integer",
                    "format": "int64"
                },
                "blind_fee": {
                    "type": "integer",
                    "format": "int32"
                },
                "private_fee": {
                    "type": "integer",
                    "format": "int32"
                },
                "featured_fee": {
                    "type": "integer",
                    "format": "int32"
                },
                "highlight_fee": {
                    "type": "number",
                    "format": "float"
                },
                "site_revenue": {
                    "type": "number",
                    "format": "float"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_template": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_blind": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_featured": {
                    "type": "integer",
                    "format": "int32"
                },
                "image": {
                    "type": "string"
                },
                "form_field_groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/addFormFieldGroups"
                    }
                }
            }
        },
        "ContestType": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int32"
                },
                "resource_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "name": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "next": {
                    "type": "integer",
                    "format": "int32"
                },
                "contest_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "form_field_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "contest_user_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "minimum_prize": {
                    "type": "number",
                    "format": "float"
                },
                "blind_fee": {
                    "type": "integer",
                    "format": "int32"
                },
                "private_fee": {
                    "type": "integer",
                    "format": "int32"
                },
                "featured_fee": {
                    "type": "integer",
                    "format": "int32"
                },
                "highlight_fee": {
                    "type": "number",
                    "format": "float"
                },
                "site_revenue": {
                    "type": "number",
                    "format": "float"
                },
                "is_watermarked": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_template": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_blind": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_featured": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_highlight": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_private": {
                    "type": "integer",
                    "format": "int32"
                },
                "maximum_entries_allowed": {
                    "type": "integer",
                    "format": "int64"
                },
                "maximum_entries_allowed_per_user": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "addContestUser": {
            "type": "object",
            "required": [
                "description"
            ],
            "properties": {
                "contest_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "description": {
                    "type": "string"
                },
                "copyright_note": {
                    "type": "string"
                },
                "contest_user_status_id": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "editContestUser": {
            "type": "object",
            "required": [
                "description"
            ],
            "properties": {
                "contest_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "description": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "copyright_note": {
                    "type": "string"
                },
                "contest_user_status_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "contest_status_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "image": {
                    "type": "string"
                }
            }
        },
        "ContestUser": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int32"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "contest_owner_user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "contest_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "description": {
                    "type": "string"
                },
                "copyright_note": {
                    "type": "string"
                },
                "entry_no": {
                    "type": "integer",
                    "format": "int64"
                },
                "contest_user_status_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "contest_user_total_ratings": {
                    "type": "integer",
                    "format": "int32"
                },
                "contest_user_rating_count": {
                    "type": "integer",
                    "format": "int32"
                },
                "average_rating": {
                    "type": "number",
                    "format": "float"
                },
                "contest_user_view_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "message_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "site_revenue": {
                    "type": "number",
                    "format": "float"
                },
                "zazpay_gateway_id": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "ContestUserDownload": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int32"
                },
                "created_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "contest_user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "ip_id": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "addContestUserRating": {
            "type": "object",
            "required": [
                "rating"
            ],
            "properties": {
                "rating": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "ContestUserRating": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int32"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "contest_user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "rating": {
                    "type": "integer",
                    "format": "int32"
                },
                "ip_id": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "addPricingDay": {
            "type": "object",
            "required": [
                "no_of_days",
                "global_price"
            ],
            "properties": {
                "no_of_days": {
                    "type": "integer",
                    "format": "int32"
                },
                "global_price": {
                    "type": "number",
                    "format": "float"
                }
            }
        },
        "PricingDay": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int32"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "no_of_days": {
                    "type": "integer",
                    "format": "int32"
                },
                "global_price": {
                    "type": "number",
                    "format": "float"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "addPricingPackage": {
            "type": "object",
            "required": [
                "name",
                "description",
                "global_price",
                "participant_commision",
                "maximum_entry_allowed"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "global_price": {
                    "type": "number",
                    "format": "float"
                },
                "participant_commision": {
                    "type": "number",
                    "format": "float"
                },
                "maximum_entry_allowed": {
                    "type": "integer",
                    "format": "int32"
                },
                "features": {
                    "type": "string"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "PricingPackage": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int32"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "global_price": {
                    "type": "number",
                    "format": "float"
                },
                "participant_commision": {
                    "type": "number",
                    "format": "float"
                },
                "maximum_entry_allowed": {
                    "type": "integer",
                    "format": "int32"
                },
                "features": {
                    "type": "string"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "Upload": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int32"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "upload_service_type_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "upload_service_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "contest_user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "upload_status_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "video_url": {
                    "type": "string"
                },
                "vimeo_video_id": {
                    "type": "string"
                },
                "youtube_video_id": {
                    "type": "string"
                },
                "vimeo_thumbnail_url": {
                    "type": "string"
                },
                "youtube_thumbnail_url": {
                    "type": "string"
                },
                "video_title": {
                    "type": "string"
                },
                "filesize": {
                    "type": "integer",
                    "format": "int64"
                },
                "failure_message": {
                    "type": "string"
                }
            }
        },
        "UploadHoster": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int32"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "upload_service_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "upload_service_type_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "total_upload_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "total_upload_error_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "total_upload_filesize": {
                    "type": "integer",
                    "format": "int64"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "addWallet": {
            "type": "object",
            "required": [
                "payment_gateway_id",
                "gateway_id",
                "buyer_name",
                "buyer_email",
                "buyer_address",
                "buyer_city",
                "buyer_state",
                "buyer_country_iso2",
                "buyer_phone",
                "buyer_zipcode",
                "credit_card_code",
                "credti_card_expire",
                "credit_card_name_on_card",
                "credit_card_number",
                "amount"
            ],
            "properties": {
                "payment_gateway_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "gateway_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "buyer_name": {
                    "type": "string"
                },
                "buyer_email": {
                    "type": "string"
                },
                "buyer_address": {
                    "type": "string"
                },
                "buyer_city": {
                    "type": "string"
                },
                "buyer_state": {
                    "type": "string"
                },
                "buyer_country_iso2": {
                    "type": "string"
                },
                "buyer_phone": {
                    "type": "integer",
                    "format": "int64"
                },
                "buyer_zipcode": {
                    "type": "integer",
                    "format": "int64"
                },
                "credit_card_code": {
                    "type": "integer",
                    "format": "int64"
                },
                "credti_card_expire": {
                    "type": "string"
                },
                "credit_card_name_on_card": {
                    "type": "string"
                },
                "credit_card_number": {
                    "type": "integer",
                    "format": "int64"
                },
                "credit_card_type": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "cvv2": {
                    "type": "string"
                },
                "expire_month": {
                    "type": "string"
                },
                "expire_year": {
                    "type": "string"
                },
                "vault_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "amount": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "Wallet": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int32"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "amount": {
                    "type": "number",
                    "format": "float"
                },
                "payment_gateway_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_payment_completed": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "addPostGateway": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "name value."
                }
            }
        },
        "updatePaymentGateways": {
            "type": "object",
            "properties": {
                "zazpay_merchant_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "zazpay_merchant_id."
                },
                "zazpay_website_id": {
                    "type": "integer",
                    "format": "int64",
                    "description": "zazpay_website_id"
                },
                "zazpay_secret_string": {
                    "type": "integer",
                    "format": "int64",
                    "description": "zazpay_secret_string."
                },
                "zazpay_api_key": {
                    "type": "integer",
                    "format": "int64",
                    "description": "zazpay_api_key."
                }
            }
        },
        "addContestTypesPricingDay": {
            "type": "object",
            "properties": {
                "contest_type_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "pricing_day_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "price": {
                    "type": "number",
                    "format": "float"
                }
            }
        },
        "ContestTypesPricingDay": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int32"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "contest_type_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "pricing_day_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "price": {
                    "type": "number",
                    "format": "float"
                }
            }
        },
        "addContestTypesPricingPackage": {
            "type": "object",
            "properties": {
                "contest_type_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "pricing_package_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "price": {
                    "type": "number",
                    "format": "float"
                },
                "participant_commision": {
                    "type": "number",
                    "format": "float"
                },
                "maximum_entry_allowed": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "ContestTypesPricingPackage": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int32"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "contest_type_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "pricing_package_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "price": {
                    "type": "number",
                    "format": "float"
                },
                "participant_commision": {
                    "type": "number",
                    "format": "float"
                },
                "maximum_entry_allowed": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "addFormFieldGroup": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "foreign_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "info": {
                    "type": "string"
                }
            }
        },
        "FormFieldGroup": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int32"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "foreign_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "info": {
                    "type": "string"
                },
                "order": {
                    "type": "integer",
                    "format": "int64"
                },
                "class": {
                    "type": "string"
                },
                "is_deletable": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_editable": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "addFormFieldGroups": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "form_fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/addFormFields"
                    }
                }
            }
        },
        "editCountry": {
            "type": "object",
            "properties": {
                "iso_alpha2": {
                    "type": "string"
                }
            }
        },
        "editState": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "editCity": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "InputType": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "QuoteStatus": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int32"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "addFormFieldSubmission": {
            "type": "object",
            "required": [
                "field"
            ],
            "properties": {
                "field": {
                    "type": "string"
                }
            }
        },
        "addSalaryType": {
            "type": "object",
            "required": [
                "name",
                "is_active"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "SalaryType": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int32"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "JobStatus": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int32"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "job_count": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "addResumeRating": {
            "type": "object",
            "required": [
                "job_id",
                "job_apply_id",
                "rating",
                "comment"
            ],
            "properties": {
                "job_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "job_apply_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "rating": {
                    "type": "integer",
                    "format": "int32"
                },
                "comment": {
                    "type": "string"
                }
            }
        },
        "ResumeRating": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "job_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "job_apply_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "rating": {
                    "type": "integer",
                    "format": "int32"
                },
                "comment": {
                    "type": "string"
                }
            }
        },
        "addMessage": {
            "type": "object",
            "properties": {
                "parent_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "foreign_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "class": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "image": {
                    "$ref": "#/definitions/addAttachment"
                },
                "is_private": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "Message": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "other_user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "parent_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "message_content_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "is_sender": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_read": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_deleted": {
                    "type": "integer",
                    "format": "int32"
                },
                "size": {
                    "type": "integer",
                    "format": "int64"
                },
                "is_private": {
                    "type": "integer",
                    "format": "int32"
                },
                "foreign_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "class": {
                    "type": "string"
                },
                "root": {
                    "type": "string"
                },
                "freshness_ts": {
                    "type": "string"
                },
                "depth": {
                    "type": "integer",
                    "format": "int64"
                },
                "materialized_path": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "is_child_replied": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "addFollower": {
            "type": "object",
            "required": [
                "foreign_id",
                "class"
            ],
            "properties": {
                "foreign_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "class": {
                    "type": "string"
                }
            }
        },
        "Follower": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int32"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "foreign_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "class": {
                    "type": "string"
                },
                "ip_id": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "View": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int32"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "foreign_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "class": {
                    "type": "string"
                },
                "ip_id": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "addView": {
            "type": "object",
            "required": [
                "foreign_id",
                "class"
            ],
            "properties": {
                "foreign_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "class": {
                    "type": "string"
                }
            }
        },
        "Plugin": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "updatePlugin": {
            "type": "object",
            "properties": {
                "is_enabled": {
                    "type": "integer",
                    "format": "int64"
                },
                "plugin": {
                    "type": "string"
                }                
            }
        },
        "Activity": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int32"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "other_user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "foreign_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "class": {
                    "type": "string"
                },
                "from_status_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "to_status_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "activity_type": {
                    "type": "string"
                }
            }
        },
        "addAttachment": {
            "type": "object",
            "properties": {
                "attachment": {
                    "type": "string"
                }
            }
        },
        "addPaymentGateway": {
            "type": "object",
            "required": [
                "name",
                "description",
                "is_test_mode",
                "is_active",
                "is_enable_for_wallet",
                "display_name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "gateway_fees": {
                    "type": "number",
                    "format": "float"
                },
                "is_test_mode": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_enable_for_wallet": {
                    "type": "integer",
                    "format": "int32"
                },
                "display_name": {
                    "type": "string"
                }
            }
        },
        "UserLogin": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "ip_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "user_agent": {
                    "type": "string"
                }
            }
        },
        "addReview": {
            "type": "object",
            "required": [
                "foreign_id",
                "class",
                "rating"
            ],
            "properties": {
                "foreign_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "class": {
                    "type": "string"
                },
                "rating": {
                    "type": "integer",
                    "format": "int32"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "addAnswerOption": {
            "type": "object",
            "properties": {
                "option": {
                    "type": "string"
                },
                "is_correct_answer": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "QuoteCategoriesQuoteService": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "quote_category_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "quote_service_id": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "addProject": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "project_status_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "project_range_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "bid_duration": {
                    "type": "integer",
                    "format": "int64"
                },
                "is_featured": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_urgent": {
                    "type": "integer",
                    "format": "int32"
                },
                "image": {
                    "type": "string"
                },
                "custom_range": {
                    "$ref": "#/definitions/ProjectCustomRange"
                },
                "skills": {
                    "type": "string"
                },
                "project_categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Project_categories"
                    }
                },
                "is_hidded_bid": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_private": {
                    "type": "integer",
                    "format": "int32"
                },
                "additional_description": {
                    "type": "string"
                },
                "payment_gateway_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "gateway_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "buyer_name": {
                    "type": "string"
                },
                "buyer_email": {
                    "type": "string"
                },
                "buyer_address": {
                    "type": "string"
                },
                "buyer_city": {
                    "type": "string"
                },
                "buyer_state": {
                    "type": "string"
                },
                "buyer_country_iso2": {
                    "type": "string"
                },
                "buyer_phone": {
                    "type": "integer",
                    "format": "int64"
                },
                "buyer_zip_code": {
                    "type": "integer",
                    "format": "int64"
                },
                "credit_card_code": {
                    "type": "integer",
                    "format": "int64"
                },
                "credit_card_expire": {
                    "type": "string"
                },
                "credit_card_name_on_card": {
                    "type": "string"
                },
                "credit_card_number": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "Project_categories": {
            "type": "object",
            "properties": {
                "project_category_id": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        }, 
        "ProjectFiles": {
            "type": "object",
            "properties": {
                "file": {
                    "type": "string"
                }
            }
        },
        "ProjectCustomRange": {
            "type": "object",
            "properties": {
                "min_amount": {
                    "type": "integer",
                    "format": "int64"
                },
                "max_amount": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "Project": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "project_status_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "project_range_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "amount": {
                    "type": "number",
                    "format": "float"
                },
                "start_date": {
                    "type": "string",
                    "format": "date"
                },
                "end_date": {
                    "type": "string",
                    "format": "date"
                },
                "cancelled_date": {
                    "type": "string"
                },
                "view_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "project_rating_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "flag_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "message_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "follower_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "ip_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "freelancer_user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "salary": {
                    "type": "number",
                    "format": "float"
                },
                "salary_type_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "bid_duration": {
                    "type": "integer",
                    "format": "int64"
                },
                "is_featured": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_private": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_hidded_bid": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_pre_paid": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_urgent": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_dispute": {
                    "type": "integer",
                    "format": "int32"
                },
                "total_ratings": {
                    "type": "number",
                    "format": "float"
                },
                "is_cancel_request_freelancer": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_cancel_request_employer": {
                    "type": "integer",
                    "format": "int32"
                },
                "funded_date": {
                    "type": "string"
                },
                "last_reopened_date": {
                    "type": "string"
                },
                "payment_completed_date": {
                    "type": "string"
                },
                "milestone_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "listing_fee": {
                    "type": "number",
                    "format": "float"
                },
                "is_paid": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_reopened": {
                    "type": "integer",
                    "format": "int32"
                },
                "zazpay_gateway_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "zazpay_payment_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "zazpay_pay_key": {
                    "type": "integer",
                    "format": "int64"
                },
                "zazpay_revised_amount": {
                    "type": "number",
                    "format": "float"
                },
                "is_notification_sent": {
                    "type": "integer",
                    "format": "int32"
                },
                "project_type_id": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "addMilestone": {
            "type": "object",
            "required": [
                "bid_id"
            ],
            "properties": {
                "bid_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "description": {
                    "type": "string"
                },
                "amount": {
                    "type": "number",
                    "format": "float"
                },
                "deadline_date": {
                    "type": "string",
                    "format": "date"
                }
            }
        },
        "updateMilestones": {
            "type": "object",
            "required": [
                "milestone_status_id"
            ],
            "properties": {
                "amount": {
                    "type": "number",
                    "format": "float"
                },
                "description": {
                    "type": "string"
                },
                "milestone_status_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "deadline_date": {
                    "type": "string",
                    "format": "date"
                }
            }
        },
        "Milestone": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "project_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "amount": {
                    "type": "number",
                    "format": "float"
                },
                "description": {
                    "type": "string"
                },
                "paid_date": {
                    "type": "string",
                    "format": "date"
                },
                "milestone_status_id": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "MilestoneStatus": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "is_active": {
                    "type": "string"
                },
                "milestone_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "order": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "addProjectCategory": {
            "type": "object",
            "required": [
                "name",
                "is_active"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                },
                "icon_class": {
                    "type": "string"
                }
            }
        },
        "ProjectCategory": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "project_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "active_project_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "addProjectRange": {
            "type": "object",
            "required": [
                "name",
                "min_amount",
                "max_amount",
                "is_active"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "min_amount": {
                    "type": "number",
                    "format": "float"
                },
                "max_amount": {
                    "type": "number",
                    "format": "float"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "ProjectRange": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "min_amount": {
                    "type": "number",
                    "format": "float"
                },
                "max_amount": {
                    "type": "number",
                    "format": "float"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                },
                "project_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "active_project_count": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "addProjectDisputes": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                }
            }
        },
        "addProjectDispute": {
            "type": "object",
            "properties": {
                "bid_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "dispute_open_type_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "reason": {
                    "type": "string"
                }
            }
        },
        "updateProjectDispute": {
            "type": "object",
            "properties": {
                "bid_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "dispute_closed_type_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "reason": {
                    "type": "string"
                }
            }
        },
        "ProjectDispute": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "project_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "dispute_open_type_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "reason": {
                    "type": "string"
                },
                "dispute_status_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "resolved_date": {
                    "type": "string"
                },
                "favour_role_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "last_replied_user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "last_replied_date": {
                    "type": "string"
                },
                "dispute_closed_type_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "message_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "expected_rating": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "addBid": {
            "type": "object",
            "required": [
                "project_id",
                "amount",
                "description",
                "duration"
            ],
            "properties": {
                "project_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "amount": {
                    "type": "number",
                    "format": "float"
                },
                "duration": {
                    "type": "integer",
                    "format": "int64"
                },
                "description": {
                    "type": "string"
                }
            }
        },
        "Bid": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "project_bid_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "project_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "amount": {
                    "type": "number",
                    "format": "float"
                },
                "description": {
                    "type": "string"
                },
                "duration": {
                    "type": "integer",
                    "format": "int64"
                },
                "duration_type_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "winner_selected_date": {
                    "type": "string"
                },
                "bid_status_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "message_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "is_notifiy": {
                    "type": "integer",
                    "format": "int32"
                },
                "latitude": {
                    "type": "number",
                    "format": "float"
                },
                "longitude": {
                    "type": "number",
                    "format": "float"
                },
                "is_withdrawn": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_freelancer_withdrawn": {
                    "type": "integer",
                    "format": "int32"
                },
                "is_reached_response_end_date_for_freelancer": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "updateBids": {
            "type": "object",
            "required": [
                "amount",
                "description",
                "duration"
            ],
            "properties": {
                "amount": {
                    "type": "number",
                    "format": "float"
                },
                "duration": {
                    "type": "integer",
                    "format": "int64"
                },
                "description": {
                    "type": "string"
                },
                "is_freelancer_withdrawn": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "updateBid": {
            "type": "object",
            "properties": {
                "bid_status_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "new_winer_bid_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "is_offered_rejected": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "updatesBid": {
            "type": "object",
            "required": [
                "new_amount"
            ],
            "properties": {
                "new_amount": {
                    "type": "integer",
                    "format": "int64"
                },
                "milestone_id": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "updateProject": {
            "type": "object",
            "properties": {
                "project_status_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "mutual_cancel_note": {
                    "type": "string"
                },
                "is_accept_mutual_cancel": {
                    "type": "integer",
                    "format": "int32"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "updateMilestone": {
            "type": "object",
            "required": [
                "milestone_status_id"
            ],
            "properties": {
                "milestone_status_id": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "addEducation": {
            "type": "object",
            "required": [
                "country_id",
                "title",
                "from_year",
                "to_year"
            ],
            "properties": {
                "country_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "title": {
                    "type": "string"
                },
                "from_year": {
                    "type": "string"
                },
                "to_year": {
                    "type": "string"
                }
            }
        },
        "Education": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "country_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "title": {
                    "type": "string"
                },
                "from_year": {
                    "type": "string"
                },
                "to_year": {
                    "type": "string"
                }
            }
        },
        "addCertification": {
            "type": "object",
            "required": [
                "title",
                "conferring_organization",
                "description",
                "year"
            ],
            "properties": {
                "title": {
                    "type": "string"
                },
                "conferring_organization": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "year": {
                    "type": "string"
                }
            }
        },
        "Certification": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "title": {
                    "type": "string"
                },
                "conferring_organization,": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "year": {
                    "type": "string"
                }
            }
        },
        "Payment": {
            "type": "object",
            "properties": {
                "class": {
                    "type": "string"
                },
                "foreign_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "payment_gateway_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "gateway_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "buyer_name": {
                    "type": "string"
                },
                "buyer_email": {
                    "type": "string"
                },
                "buyer_address": {
                    "type": "string"
                },
                "buyer_city": {
                    "type": "string"
                },
                "buyer_state": {
                    "type": "string"
                },
                "buyer_country_iso2": {
                    "type": "string"
                },
                "buyer_phone": {
                    "type": "integer",
                    "format": "int64"
                },
                "buyer_zip_code": {
                    "type": "integer",
                    "format": "int64"
                },
                "credit_card_code": {
                    "type": "integer",
                    "format": "int64"
                },
                "credit_card_expire": {
                    "type": "string"
                },
                "credit_card_name_on_card": {
                    "type": "string"
                },
                "credit_card_number": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "addPayment": {
            "type": "object",
            "properties": {
                "class": {
                    "type": "string"
                },
                "foreign_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "payment_gateway_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "gateway_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "buyer_name": {
                    "type": "string"
                },
                "buyer_email": {
                    "type": "string"
                },
                "buyer_address": {
                    "type": "string"
                },
                "buyer_city": {
                    "type": "string"
                },
                "buyer_state": {
                    "type": "string"
                },
                "buyer_country_iso2": {
                    "type": "string"
                },
                "buyer_phone": {
                    "type": "integer",
                    "format": "int64"
                },
                "buyer_zip_code": {
                    "type": "integer",
                    "format": "int64"
                },
                "credit_card_code": {
                    "type": "integer",
                    "format": "int64"
                },
                "credit_card_expire": {
                    "type": "string"
                },
                "credit_card_name_on_card": {
                    "type": "string"
                },
                "credit_card_number": {
                    "type": "integer",
                    "format": "int64"
                },
                "credit_card_type": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "cvv2": {
                    "type": "string"
                },
                "expire_month": {
                    "type": "string"
                },
                "expire_year": {
                    "type": "string"
                },
                "vault_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "coupon_code": {
                    "type": "string"
                }
            }
        },
        "addProjectBidInvoice": {
            "type": "object",
            "properties": {
                "bid_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "project_bid_invoice_items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/addProjectBidInvoiceItems"
                    }
                }
            }
        },
        "addProjectBidInvoiceItems": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number",
                    "format": "float"
                },
                "description": {
                    "type": "string"
                }
            }
        },
        "ProjectBidInvoice": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "project_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "bid_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "amount": {
                    "type": "number",
                    "format": "float"
                },
                "site_fee": {
                    "type": "number",
                    "format": "float"
                },
                "is_paid": {
                    "type": "integer",
                    "format": "int64"
                },
                "paid_on": {
                    "type": "string"
                },
                "pay_key": {
                    "type": "string"
                },
                "zazpay_pay_key": {
                    "type": "string"
                },
                "zazpay_payment_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "zazpay_gateway_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "zazpay_revised_amount": {
                    "type": "number",
                    "format": "int64"
                }
            }
        },
        "addWorkProfile": {
            "type": "object",
            "required": [
                "title",
                "description",
                "from_month_year",
                "to_month_year"
            ],
            "properties": {
                "title": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "from_month_year": {
                    "type": "string"
                },
                "to_month_year": {
                    "type": "string"
                },
                "company": {
                    "type": "string"
                },
                "currently_working": {
                    "type": "string"
                }
            }
        },
        "WorkProfile": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "title": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "from_month_year": {
                    "type": "string"
                },
                "to_month_year": {
                    "type": "string"
                }
            }
        },
        "addPublication": {
            "type": "object",
            "required": [
                "title",
                "publisher",
                "description"
            ],
            "properties": {
                "title": {
                    "type": "string"
                },
                "publisher": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                }
            }
        },
        "Publication": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int32"
                },
                "user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "title": {
                    "type": "string"
                },
                "publisher": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                }
            }
        },
        "BidStatus": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "bid_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "ProjectStatus": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "project_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "ExamStatuses": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "exams_user_count": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "ContestUserStatus": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            }
        },
        "addProjectAttachment": {
            "type": "object",
            "properties": {
                "project_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "class": {
                    "type": "string"
                },
                "files": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Files"
                    }
                }
            }
        },
        "ProjectAttachment": {
            "type": "object",
            "properties": {
                "project_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "class": {
                    "type": "string"
                }
            }
        },
        "Files": {
            "type": "object",
            "properties": {
                "file": {
                    "type": "string"
                }
            }
        },
        "DisputeClosedType": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                },
                "dispute_open_type_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "project_role_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "reason": {
                    "type": "string"
                },
                "resolve_type": {
                    "type": "string"
                },
                "action_list": {
                    "type": "string"
                }
            }
        },
        "DisputeOpenType": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "project_role_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "DisputeStatus": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "addCoupon": {
            "type": "object",
            "required": [
                "coupon_code",
                "max_number_of_time_can_use",
                "max_number_of_time_can_use_per_user",
                "discount",
                "discount_type_id",
                "min_amount",
                "coupon_expiry_date",
                "is_active"
            ],
            "properties": {
                "coupon_code": {
                    "type": "string"
                },
                "max_number_of_time_can_use": {
                    "type": "number",
                    "format": "float"
                },
                "max_number_of_time_can_use_per_user": {
                    "type": "number",
                    "format": "float"
                },
                "discount": {
                    "type": "number",
                    "format": "float"
                },
                "discount_type_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "min_amount": {
                    "type": "number",
                    "format": "float"
                },
                "coupon_expiry_date": {
                    "type": "string",
                    "format": "date"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "Ips": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "ip": {
                    "type": "string"
                },
                "host": {
                    "type": "number",
                    "format": "float"
                }
            }
        },
        "Coupon": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "coupon_code": {
                    "type": "string"
                },
                "max_number_of_time_can_use": {
                    "type": "number",
                    "format": "float"
                },
                "max_number_of_time_can_use_per_user": {
                    "type": "number",
                    "format": "float"
                },
                "coupon_used_count": {
                    "type": "integer",
                    "format": "int64"
                },
                "discount": {
                    "type": "number",
                    "format": "float"
                },
                "discount_type_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "min_amount": {
                    "type": "number",
                    "format": "float"
                },
                "coupon_expiry_date": {
                    "type": "string",
                    "format": "date"
                },
                "is_active": {
                    "type": "integer",
                    "format": "int32"
                }
            }
        },
        "DiscountType": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "addHireRequest": {
            "type": "object",
            "required": [
                "projects",
                "message"
            ],
            "properties": {
                "message": {
                    "type": "string"
                },
                "class": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer",
                    "format": "int32"
                },
                "projects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Projects"
                    }
                }
            }
        },
        "HireRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "requested_user_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "foreign_id": {
                    "type": "integer",
                    "format": "int64"
                },
                "class": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "Projects": {
            "type": "object",
            "properties": {
                "project_id": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "addVault": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "zip_code": {
                    "type": "integer"
                },
                "phone": {
                    "type": "string"
                },
                "credit_card_number": {
                    "type": "string"
                },
                "credit_card_type": {
                    "type": "string"
                },
                "credit_card_expire": {
                    "type": "string"
                },
                "credit_card_name_on_card": {
                    "type": "string"
                }
            }
        },
        "Vault": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created": {
                    "type": "string"
                },
                "modified": {
                    "type": "string"
                },
                "masked_cc": {
                    "type": "string"
                },
                "credit_card_type": {
                    "type": "string"
                },
                "vault_key": {
                    "type": "string"
                },
                "vault_id": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "addPaypalVault": {
            "type": "object",
            "properties": {
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "cvv2": {
                    "type": "string"
                },
                "expire_month": {
                    "type": "string"
                },
                "expire_year": {
                    "type": "string"
                },
                "credit_card_number": {
                    "type": "string"
                },
                "credit_card_type": {
                    "type": "string"
                }
            }
        },
        "PaypalVault": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "created": {
                    "type": "string"
                },
                "modified": {
                    "type": "string"
                },
                "masked_cc": {
                    "type": "string"
                },
                "credit_card_type": {
                    "type": "string"
                },
                "vault_key": {
                    "type": "string"
                }
            }
        },
        "addTranslation": {
            "type": "object",
            "properties": {
                "lang_code": {
                    "type": "string"
                }
            }
        },
        "editTranslation": {
            "type": "object",
            "properties": {
                "keyword": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/addNewKey"
                    }
                }
            }
        },
        "addNewKey": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                }
            }
        },
        "Translation": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        }, 
        "updateTranslation": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                }
            }
        },                
        "Error": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "format": "int64"
                },
                "message": {
                    "type": "string"
                },
                "fields": {
                    "type": "string"
                }
            }
        }
    }
}
